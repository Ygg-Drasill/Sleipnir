<<
import (
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/util"
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/token"
)
>>

/* Production rules */

/* Outer file scope */
ProgramDeclarationLst
    : NodeLst ProgramDeclarationLst
    | ConnLst ProgramDeclarationLst
    | empty
    ;

Node : "node" nodeId "{" NodeIn NodeOut NodeProc "}" ;

Conn :  ConnOut "->" ConnIn ;
ConnOut
    : nodeId "." out "." varId
    | nodeId "." out
    ;

ConnIn
    : nodeId "." in "." varId
    | nodeId "." in
    ;

NodeLst : Node | Node NodeLst ;
ConnLst : Conn | Conn ConnLst ;

/* Node scope */
Type : "int" | "bool" | "string" ;


NodeIn : "in" "{" DeclarationLst "}" | empty ;

NodeOut : "out" "{" DeclarationLst "}" | empty ;

NodeProc : "process" "{" StmtLst "}" | empty ;


/* Statement productions */
DeclarationStmt
    	: Type varId stmtEnd
    	| Type AssignStmt
    	;

DeclarationLst
    	: DeclarationStmt DeclarationLst
    	| DeclarationStmt
	    ;

Condition
    	: LogicalExpr logicOp Condition
    	| LogicalExpr
    	;

LogicalExpr : varId compOp varId ;

AssignStmt : varId assignOp int64 stmtEnd;

ControlStmt: IfStmt | WhileStmt ;

IfStmt: "if" "(" Condition ")" "{" StmtLst "}" ;

WhileStmt : "while" "(" Condition ")" "{" StmtLst "}" ;

Stmt : DeclarationStmt | AssignStmt | ControlStmt ;

StmtLst : Stmt StmtLst | Stmt ;


/* Expressions */
Factor
    : int64                         <<util.IntValue($0.(*token.Token).Lit)>>
    | AritExpr
    ;

AritExpr
	: AritExpr "+" AritExpr         <<$0.(int64) + $2.(int64), nil>>
	| AritExpr "-" AritExpr         <<$0.(int64) - $2.(int64), nil>>
	| Term
	;

Term
	: Term "*" Term
	| Factor
	;
