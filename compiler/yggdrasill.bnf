<<
import (
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/util"
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/token"
    "github.com/Ygg-Drasill/Sleipnir/compiler/ast"
)
>>

/* Production rules */

/* Outer file scope */
ProgramDeclarationLst
    : NodeLst ConnLst   << ast.NewProgram($0, $1) >>
    ;

Node
    : "node" nodeId "{" NodeIn NodeOut NodeProc "}"     << ast.NewNode($1, $3, $4, $5) >>
    ;

Conn
    : ConnOut "->" ConnIn stmtEnd       << ast.NewConnection($0, $2) >>
    ;

ConnOut
    : nodeId "." out "." varId          << ast.NewJunction($0, $4) >>
    | nodeId "." out                    << ast.NewJunction($0, "") >>
    ;

ConnIn
    : nodeId "." in "." varId           << ast.NewJunction($0, $4) >>
    | nodeId "." in                     << ast.NewJunction($0, "") >>
    ;

NodeLst
    : Node          << ast.NewNodeList($0) >>
    | Node NodeLst  << ast.AppendNode($1, $0) >>
    ;

ConnLst
    : Conn          << ast.NewConnectionList($0) >>
    | Conn ConnLst  << ast.AppendConnection($1, $0) >>
    ;

/* Node scope */
Type : "int" | "bool" | "string" ;


NodeIn : "in" "{" DeclarationLst "}" | empty ;

NodeOut : "out" "{" DeclarationLst "}" | empty ;

NodeProc
    : "process" "{" StmtLst "}"
    | "process" "{" "}"
    | empty
    ;


/* Statement productions */
DeclarationStmt
    	: Type varId stmtEnd
    	| Type AssignStmt
    	;

DeclarationLst
    	: DeclarationStmt DeclarationLst
    	| DeclarationStmt
	    ;

Condition
    	: LogicalExpr logicOp Condition
    	| LogicalExpr
    	;

LogicalExpr : varId compOp varId ;

AssignStmt : varId assignOp int64 stmtEnd;

ControlStmt: IfStmt | WhileStmt ;

IfStmt: "if" "(" Condition ")" "{" StmtLst "}" ;

WhileStmt : "while" "(" Condition ")" "{" StmtLst "}" ;

Stmt : DeclarationStmt | AssignStmt | ControlStmt ;

StmtLst : Stmt StmtLst | Stmt ;


/* Expressions */
Factor
    : int64                         <<util.IntValue($0.(*token.Token).Lit)>>
    | AritExpr
    ;

AritExpr
	: AritExpr "+" AritExpr         <<$0.(int64) + $2.(int64), nil>>
	| AritExpr "-" AritExpr         <<$0.(int64) - $2.(int64), nil>>
	| Term
	;

Term
	: Term "*" Term
	| Factor
	;
