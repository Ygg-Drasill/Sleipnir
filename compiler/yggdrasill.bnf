<<
import (
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/util"
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/token"
    "github.com/Ygg-Drasill/Sleipnir/compiler/ast"
)
>>

/* Production rules */

/* Outer file scope */
ProgramDeclarationLst
    : NodeLst ConnLst   << ast.NewProgram($0, $1) >>
    ;

Node
    : "node" nodeId "{" NodeIn NodeOut NodeProc "}"     << ast.NewNode($1, $3, $4, $5) >>
    ;

Conn
    : ConnOut "->" ConnIn stmtEnd       << ast.NewConnection($0, $2) >>
    ;

ConnOut
    : nodeId "." out "." varId          << ast.NewJunction($0, $4) >>
    | nodeId "." out                    << ast.NewJunction($0, "") >>
    ;

ConnIn
    : nodeId "." in "." varId           << ast.NewJunction($0, $4) >>
    | nodeId "." in                     << ast.NewJunction($0, "") >>
    ;

NodeLst
    : Node          					<< ast.NewNodeList($0) >>
    | Node NodeLst  					<< ast.AppendNode($1, $0) >>
    ;

ConnLst
    : Conn          					<< ast.NewConnectionList($0) >>
    | Conn ConnLst  					<< ast.AppendConnection($1, $0) >>
    ;

/* Node scope */
Type : "int" | "bool" | "string" ;

NodeVar
    : in "." varId 						<< ast.NewNodeVar($0, $2) >>
    | out "." varId 					<< ast.NewNodeVar($0, $2) >>
    | varId 							<< ast.NewNodeVar("", $0) >>
    ;


NodeIn : in "{" DeclarationLst "}" | empty ;

NodeOut : out "{" DeclarationLst "}" | empty ;

NodeProc
    : "process" "{" StmtLst "}"
    | "process" "{" "}"
    | empty
    ;

/* Statement productions */
DeclarationStmt
    	: Type varId stmtEnd
    	| Type varId Assignment stmtEnd
    	;

DeclarationLst
    	: DeclarationStmt DeclarationLst
    	| DeclarationStmt               << ast.NewDeclarationList($0, $0) >>
	    ;

Condition
    	: LogicalExpr logicOp Condition
    	| LogicalExpr
    	;

Assignment : assignOp Expr ;

AssignStmt : NodeVar Assignment stmtEnd ;

ControlStmt: IfStmt | WhileStmt ;

IfStmt: "if" "(" Condition ")" "{" StmtLst "}" ;

WhileStmt : "while" "(" Condition ")" "{" StmtLst "}" ;

Stmt : DeclarationStmt | AssignStmt | ControlStmt ;

StmtLst : Stmt StmtLst | Stmt ;


/* Expressions */
Expr
    : AritExpr
    | LogicalExpr
    ;

LogicalExpr : NodeVar compOp NodeVar ;

AritExpr
    : AritExpr "+" Term		 		<< ast.Add($0, $2) >>
    | AritExpr "-" Term		 		<< ast.Sub($0, $2) >>
    | Term
    ;

Term
    : Term "*" Factor 				<< ast.Mul($0, $2) >>
    | Term "/" Factor 				<< ast.Div($0, $2) >>
    | Factor
    ;

Factor
    : int64 						<< util.IntValue($0.(*token.Token).Lit) >>
    | NodeVar
    ;
