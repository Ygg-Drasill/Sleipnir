// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			shift(4), // node
			nil,      // nodeId
			nil,      // {
			nil,      // }
			nil,      // ->
			nil,      // stmtEnd
			nil,      // .
			nil,      // out
			nil,      // varId
			nil,      // in
			nil,      // int
			nil,      // bool
			nil,      // string
			nil,      // empty
			nil,      // process
			nil,      // logicOp
			nil,      // assignOp
			nil,      // if
			nil,      // (
			nil,      // )
			nil,      // while
			nil,      // compOp
			nil,      // +
			nil,      // -
			nil,      // *
			nil,      // /
			nil,      // int64
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // ␚
			nil,          // node
			nil,          // nodeId
			nil,          // {
			nil,          // }
			nil,          // ->
			nil,          // stmtEnd
			nil,          // .
			nil,          // out
			nil,          // varId
			nil,          // in
			nil,          // int
			nil,          // bool
			nil,          // string
			nil,          // empty
			nil,          // process
			nil,          // logicOp
			nil,          // assignOp
			nil,          // if
			nil,          // (
			nil,          // )
			nil,          // while
			nil,          // compOp
			nil,          // +
			nil,          // -
			nil,          // *
			nil,          // /
			nil,          // int64
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			nil,      // node
			shift(6), // nodeId
			nil,      // {
			nil,      // }
			nil,      // ->
			nil,      // stmtEnd
			nil,      // .
			nil,      // out
			nil,      // varId
			nil,      // in
			nil,      // int
			nil,      // bool
			nil,      // string
			nil,      // empty
			nil,      // process
			nil,      // logicOp
			nil,      // assignOp
			nil,      // if
			nil,      // (
			nil,      // )
			nil,      // while
			nil,      // compOp
			nil,      // +
			nil,      // -
			nil,      // *
			nil,      // /
			nil,      // int64
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			shift(4),  // node
			reduce(8), // nodeId, reduce: NodeLst
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			shift(10), // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // ␚, reduce: ProgramDeclarationLst
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			shift(11), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(10), // ␚, reduce: ConnLst
			nil,        // node
			shift(6),   // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			shift(13), // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			reduce(9), // nodeId, reduce: NodeLst
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(14), // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(15), // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(11), // ␚, reduce: ConnLst
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			shift(16), // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(19), // }, reduce: NodeIn
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(19), // out, reduce: NodeIn
			nil,        // varId
			shift(19),  // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			reduce(19), // process, reduce: NodeIn
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			reduce(5), // ->, reduce: ConnOut
			nil,       // stmtEnd
			shift(20), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			shift(21), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			shift(22), // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(21), // }, reduce: NodeOut
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(24),  // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			reduce(21), // process, reduce: NodeOut
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(25), // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			shift(26), // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			shift(27), // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // ␚, reduce: Conn
			nil,       // node
			reduce(3), // nodeId, reduce: Conn
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(24), // }, reduce: NodeProc
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			shift(29),  // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(30), // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			shift(32), // int
			shift(33), // bool
			shift(34), // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			reduce(4), // ->, reduce: ConnOut
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			reduce(7), // stmtEnd, reduce: ConnIn
			shift(37), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			shift(38), // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(39), // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			shift(32), // int
			shift(33), // bool
			shift(34), // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			shift(41), // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			reduce(12), // varId, reduce: Type
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			reduce(13), // varId, reduce: Type
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			reduce(14), // varId, reduce: Type
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			shift(42), // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(28), // }, reduce: DeclarationLst
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			shift(32),  // int
			shift(33),  // bool
			shift(34),  // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			shift(44), // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(2), // node, reduce: Node
			reduce(2), // nodeId, reduce: Node
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			shift(45), // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(46), // out
			shift(47), // varId
			shift(48), // in
			shift(32), // int
			shift(33), // bool
			shift(34), // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			shift(57), // if
			nil,       // (
			nil,       // )
			shift(58), // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			shift(60), // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			shift(61), // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			shift(63), // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(18), // }, reduce: NodeIn
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(18), // out, reduce: NodeIn
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			reduce(18), // process, reduce: NodeIn
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(27), // }, reduce: DeclarationLst
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			reduce(6), // stmtEnd, reduce: ConnIn
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(23), // }, reduce: NodeProc
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			shift(64), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			reduce(17), // assignOp, reduce: NodeVar
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			shift(65), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			shift(66), // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			shift(63), // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			shift(68), // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(37), // }, reduce: Stmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(37), // out, reduce: Stmt
			reduce(37), // varId, reduce: Stmt
			reduce(37), // in, reduce: Stmt
			reduce(37), // int, reduce: Stmt
			reduce(37), // bool, reduce: Stmt
			reduce(37), // string, reduce: Stmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(37), // if, reduce: Stmt
			nil,        // (
			nil,        // )
			reduce(37), // while, reduce: Stmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(38), // }, reduce: Stmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(38), // out, reduce: Stmt
			reduce(38), // varId, reduce: Stmt
			reduce(38), // in, reduce: Stmt
			reduce(38), // int, reduce: Stmt
			reduce(38), // bool, reduce: Stmt
			reduce(38), // string, reduce: Stmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(38), // if, reduce: Stmt
			nil,        // (
			nil,        // )
			reduce(38), // while, reduce: Stmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(39), // }, reduce: Stmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(39), // out, reduce: Stmt
			reduce(39), // varId, reduce: Stmt
			reduce(39), // in, reduce: Stmt
			reduce(39), // int, reduce: Stmt
			reduce(39), // bool, reduce: Stmt
			reduce(39), // string, reduce: Stmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(39), // if, reduce: Stmt
			nil,        // (
			nil,        // )
			reduce(39), // while, reduce: Stmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(33), // }, reduce: ControlStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(33), // out, reduce: ControlStmt
			reduce(33), // varId, reduce: ControlStmt
			reduce(33), // in, reduce: ControlStmt
			reduce(33), // int, reduce: ControlStmt
			reduce(33), // bool, reduce: ControlStmt
			reduce(33), // string, reduce: ControlStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(33), // if, reduce: ControlStmt
			nil,        // (
			nil,        // )
			reduce(33), // while, reduce: ControlStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(34), // }, reduce: ControlStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(34), // out, reduce: ControlStmt
			reduce(34), // varId, reduce: ControlStmt
			reduce(34), // in, reduce: ControlStmt
			reduce(34), // int, reduce: ControlStmt
			reduce(34), // bool, reduce: ControlStmt
			reduce(34), // string, reduce: ControlStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(34), // if, reduce: ControlStmt
			nil,        // (
			nil,        // )
			reduce(34), // while, reduce: ControlStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			shift(69), // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			shift(70), // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(41), // }, reduce: StmtLst
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(46),  // out
			shift(47),  // varId
			shift(48),  // in
			shift(32),  // int
			shift(33),  // bool
			shift(34),  // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			shift(57),  // if
			nil,        // (
			nil,        // )
			shift(58),  // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(20), // }, reduce: NodeOut
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			reduce(20), // process, reduce: NodeOut
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(25), // }, reduce: DeclarationStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			reduce(25), // int, reduce: DeclarationStmt
			reduce(25), // bool, reduce: DeclarationStmt
			reduce(25), // string, reduce: DeclarationStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			shift(72), // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(73), // out
			shift(74), // varId
			shift(75), // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			shift(82), // int64
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			shift(83), // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			nil,       // out
			shift(84), // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			shift(85), // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			shift(63), // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			shift(87), // stmtEnd
			nil,       // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(22), // }, reduce: NodeProc
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(88), // out
			shift(89), // varId
			shift(90), // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(88), // out
			shift(89), // varId
			shift(90), // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(40), // }, reduce: StmtLst
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(26), // }, reduce: DeclarationStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			reduce(26), // int, reduce: DeclarationStmt
			reduce(26), // bool, reduce: DeclarationStmt
			reduce(26), // string, reduce: DeclarationStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			shift(95), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(17), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			reduce(17), // compOp, reduce: NodeVar
			reduce(17), // +, reduce: NodeVar
			reduce(17), // -, reduce: NodeVar
			reduce(17), // *, reduce: NodeVar
			reduce(17), // /, reduce: NodeVar
			nil,        // int64
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			shift(96), // .
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(52), // stmtEnd, reduce: Factor
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			shift(97),  // compOp
			reduce(52), // +, reduce: Factor
			reduce(52), // -, reduce: Factor
			reduce(52), // *, reduce: Factor
			reduce(52), // /, reduce: Factor
			nil,        // int64
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(43), // stmtEnd, reduce: Expr
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(31), // stmtEnd, reduce: Assignment
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(42), // stmtEnd, reduce: Expr
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			shift(98),  // +
			shift(99),  // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(47), // stmtEnd, reduce: AritExpr
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(47), // +, reduce: AritExpr
			reduce(47), // -, reduce: AritExpr
			shift(100), // *
			shift(101), // /
			nil,        // int64
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(50), // stmtEnd, reduce: Term
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(50), // +, reduce: Term
			reduce(50), // -, reduce: Term
			reduce(50), // *, reduce: Term
			reduce(50), // /, reduce: Term
			nil,        // int64
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(51), // stmtEnd, reduce: Factor
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(51), // +, reduce: Factor
			reduce(51), // -, reduce: Factor
			reduce(51), // *, reduce: Factor
			reduce(51), // /, reduce: Factor
			nil,        // int64
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			reduce(16), // assignOp, reduce: NodeVar
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			reduce(15), // assignOp, reduce: NodeVar
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(25), // }, reduce: DeclarationStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(25), // out, reduce: DeclarationStmt
			reduce(25), // varId, reduce: DeclarationStmt
			reduce(25), // in, reduce: DeclarationStmt
			reduce(25), // int, reduce: DeclarationStmt
			reduce(25), // bool, reduce: DeclarationStmt
			reduce(25), // string, reduce: DeclarationStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(25), // if, reduce: DeclarationStmt
			nil,        // (
			nil,        // )
			reduce(25), // while, reduce: DeclarationStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			shift(102), // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(32), // }, reduce: AssignStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(32), // out, reduce: AssignStmt
			reduce(32), // varId, reduce: AssignStmt
			reduce(32), // in, reduce: AssignStmt
			reduce(32), // int, reduce: AssignStmt
			reduce(32), // bool, reduce: AssignStmt
			reduce(32), // string, reduce: AssignStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(32), // if, reduce: AssignStmt
			nil,        // (
			nil,        // )
			reduce(32), // while, reduce: AssignStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(103), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			reduce(17), // compOp, reduce: NodeVar
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(104), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			shift(105), // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			shift(106), // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			shift(107), // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			reduce(30), // ), reduce: Condition
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			shift(108), // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(109), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(110), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(111), // out
			shift(112), // varId
			shift(113), // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(115), // out
			shift(116), // varId
			shift(117), // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			shift(82),  // int64
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(115), // out
			shift(116), // varId
			shift(117), // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			shift(82),  // int64
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(115), // out
			shift(116), // varId
			shift(117), // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			shift(82),  // int64
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(115), // out
			shift(116), // varId
			shift(117), // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			shift(82),  // int64
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(26), // }, reduce: DeclarationStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(26), // out, reduce: DeclarationStmt
			reduce(26), // varId, reduce: DeclarationStmt
			reduce(26), // in, reduce: DeclarationStmt
			reduce(26), // int, reduce: DeclarationStmt
			reduce(26), // bool, reduce: DeclarationStmt
			reduce(26), // string, reduce: DeclarationStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(26), // if, reduce: DeclarationStmt
			nil,        // (
			nil,        // )
			reduce(26), // while, reduce: DeclarationStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(123), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(124), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			shift(125), // out
			shift(126), // varId
			shift(127), // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			shift(129), // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(88), // out
			shift(89), // varId
			shift(90), // in
			nil,       // int
			nil,       // bool
			nil,       // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			nil,       // if
			nil,       // (
			nil,       // )
			nil,       // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			shift(131), // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(16), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			reduce(16), // compOp, reduce: NodeVar
			reduce(16), // +, reduce: NodeVar
			reduce(16), // -, reduce: NodeVar
			reduce(16), // *, reduce: NodeVar
			reduce(16), // /, reduce: NodeVar
			nil,        // int64
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(15), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			reduce(15), // compOp, reduce: NodeVar
			reduce(15), // +, reduce: NodeVar
			reduce(15), // -, reduce: NodeVar
			reduce(15), // *, reduce: NodeVar
			reduce(15), // /, reduce: NodeVar
			nil,        // int64
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(132), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(17), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(133), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(44), // stmtEnd, reduce: LogicalExpr
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(134), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(17), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(17), // +, reduce: NodeVar
			reduce(17), // -, reduce: NodeVar
			reduce(17), // *, reduce: NodeVar
			reduce(17), // /, reduce: NodeVar
			nil,        // int64
		},
	},
	actionRow{ // S117
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(135), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(52), // stmtEnd, reduce: Factor
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(52), // +, reduce: Factor
			reduce(52), // -, reduce: Factor
			reduce(52), // *, reduce: Factor
			reduce(52), // /, reduce: Factor
			nil,        // int64
		},
	},
	actionRow{ // S119
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(45), // stmtEnd, reduce: AritExpr
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			shift(98),  // +
			shift(99),  // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(46), // stmtEnd, reduce: AritExpr
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			shift(98),  // +
			shift(99),  // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(48), // stmtEnd, reduce: Term
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(48), // +, reduce: Term
			reduce(48), // -, reduce: Term
			reduce(48), // *, reduce: Term
			reduce(48), // /, reduce: Term
			nil,        // int64
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(49), // stmtEnd, reduce: Term
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(49), // +, reduce: Term
			reduce(49), // -, reduce: Term
			reduce(49), // *, reduce: Term
			reduce(49), // /, reduce: Term
			nil,        // int64
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			reduce(16), // compOp, reduce: NodeVar
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			reduce(15), // compOp, reduce: NodeVar
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(136), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			reduce(17), // logicOp, reduce: NodeVar
			nil,        // assignOp
			nil,        // if
			nil,        // (
			reduce(17), // ), reduce: NodeVar
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			shift(137), // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			reduce(44), // logicOp, reduce: LogicalExpr
			nil,        // assignOp
			nil,        // if
			nil,        // (
			reduce(44), // ), reduce: LogicalExpr
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(46), // out
			shift(47), // varId
			shift(48), // in
			shift(32), // int
			shift(33), // bool
			shift(34), // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			shift(57), // if
			nil,       // (
			nil,       // )
			shift(58), // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			reduce(29), // ), reduce: Condition
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // {
			nil,       // }
			nil,       // ->
			nil,       // stmtEnd
			nil,       // .
			shift(46), // out
			shift(47), // varId
			shift(48), // in
			shift(32), // int
			shift(33), // bool
			shift(34), // string
			nil,       // empty
			nil,       // process
			nil,       // logicOp
			nil,       // assignOp
			shift(57), // if
			nil,       // (
			nil,       // )
			shift(58), // while
			nil,       // compOp
			nil,       // +
			nil,       // -
			nil,       // *
			nil,       // /
			nil,       // int64
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(140), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(141), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(142), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(143), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(144), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			shift(145), // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			shift(146), // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			shift(147), // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(16), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(15), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(16), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(16), // +, reduce: NodeVar
			reduce(16), // -, reduce: NodeVar
			reduce(16), // *, reduce: NodeVar
			reduce(16), // /, reduce: NodeVar
			nil,        // int64
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			reduce(15), // stmtEnd, reduce: NodeVar
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			nil,        // if
			nil,        // (
			nil,        // )
			nil,        // while
			nil,        // compOp
			reduce(15), // +, reduce: NodeVar
			reduce(15), // -, reduce: NodeVar
			reduce(15), // *, reduce: NodeVar
			reduce(15), // /, reduce: NodeVar
			nil,        // int64
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			reduce(16), // logicOp, reduce: NodeVar
			nil,        // assignOp
			nil,        // if
			nil,        // (
			reduce(16), // ), reduce: NodeVar
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			nil,        // }
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // int
			nil,        // bool
			nil,        // string
			nil,        // empty
			nil,        // process
			reduce(15), // logicOp, reduce: NodeVar
			nil,        // assignOp
			nil,        // if
			nil,        // (
			reduce(15), // ), reduce: NodeVar
			nil,        // while
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(35), // }, reduce: IfStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(35), // out, reduce: IfStmt
			reduce(35), // varId, reduce: IfStmt
			reduce(35), // in, reduce: IfStmt
			reduce(35), // int, reduce: IfStmt
			reduce(35), // bool, reduce: IfStmt
			reduce(35), // string, reduce: IfStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(35), // if, reduce: IfStmt
			nil,        // (
			nil,        // )
			reduce(35), // while, reduce: IfStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // {
			reduce(36), // }, reduce: WhileStmt
			nil,        // ->
			nil,        // stmtEnd
			nil,        // .
			reduce(36), // out, reduce: WhileStmt
			reduce(36), // varId, reduce: WhileStmt
			reduce(36), // in, reduce: WhileStmt
			reduce(36), // int, reduce: WhileStmt
			reduce(36), // bool, reduce: WhileStmt
			reduce(36), // string, reduce: WhileStmt
			nil,        // empty
			nil,        // process
			nil,        // logicOp
			nil,        // assignOp
			reduce(36), // if, reduce: WhileStmt
			nil,        // (
			nil,        // )
			reduce(36), // while, reduce: WhileStmt
			nil,        // compOp
			nil,        // +
			nil,        // -
			nil,        // *
			nil,        // /
			nil,        // int64
		},
	},
}
