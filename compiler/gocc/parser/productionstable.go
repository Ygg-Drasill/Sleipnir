// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/util"
    "github.com/Ygg-Drasill/Sleipnir/compiler/gocc/token"
    "github.com/Ygg-Drasill/Sleipnir/compiler/ast"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : ProgramDeclarationLst	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ProgramDeclarationLst : NodeLst ConnLst	<< ast.NewProgram(X[0], X[1]) >>`,
		Id:         "ProgramDeclarationLst",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProgram(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Node : "node" nodeId "{" NodeIn NodeOut NodeProc "}"	<< ast.NewNode(X[1], X[3], X[4], X[5]) >>`,
		Id:         "Node",
		NTType:     2,
		Index:      2,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(X[1], X[3], X[4], X[5])
		},
	},
	ProdTabEntry{
		String: `Conn : ConnOut "->" ConnIn stmtEnd	<< ast.NewConnection(X[0], X[2]) >>`,
		Id:         "Conn",
		NTType:     3,
		Index:      3,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConnection(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ConnOut : nodeId "." out "." varId	<< ast.NewJunction(X[0], X[4]) >>`,
		Id:         "ConnOut",
		NTType:     4,
		Index:      4,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewJunction(X[0], X[4])
		},
	},
	ProdTabEntry{
		String: `ConnOut : nodeId "." out	<< ast.NewJunction(X[0], "") >>`,
		Id:         "ConnOut",
		NTType:     4,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewJunction(X[0], "")
		},
	},
	ProdTabEntry{
		String: `ConnIn : nodeId "." in "." varId	<< ast.NewJunction(X[0], X[4]) >>`,
		Id:         "ConnIn",
		NTType:     5,
		Index:      6,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewJunction(X[0], X[4])
		},
	},
	ProdTabEntry{
		String: `ConnIn : nodeId "." in	<< ast.NewJunction(X[0], "") >>`,
		Id:         "ConnIn",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewJunction(X[0], "")
		},
	},
	ProdTabEntry{
		String: `NodeLst : Node	<< ast.NewNodeList(X[0]) >>`,
		Id:         "NodeLst",
		NTType:     6,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0])
		},
	},
	ProdTabEntry{
		String: `NodeLst : Node NodeLst	<< ast.AppendNode(X[1], X[0]) >>`,
		Id:         "NodeLst",
		NTType:     6,
		Index:      9,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendNode(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `ConnLst : Conn	<< ast.NewConnectionList(X[0]) >>`,
		Id:         "ConnLst",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConnectionList(X[0])
		},
	},
	ProdTabEntry{
		String: `ConnLst : Conn ConnLst	<< ast.AppendConnection(X[1], X[0]) >>`,
		Id:         "ConnLst",
		NTType:     7,
		Index:      11,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendConnection(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `Type : "int"	<<  >>`,
		Id:         "Type",
		NTType:     8,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : "bool"	<<  >>`,
		Id:         "Type",
		NTType:     8,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : "string"	<<  >>`,
		Id:         "Type",
		NTType:     8,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NodeVar : in "." varId	<< ast.NewNodeVar(X[0], X[2]) >>`,
		Id:         "NodeVar",
		NTType:     9,
		Index:      15,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeVar(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `NodeVar : out "." varId	<< ast.NewNodeVar(X[0], X[2]) >>`,
		Id:         "NodeVar",
		NTType:     9,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeVar(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `NodeVar : varId	<< ast.NewNodeVar("", X[0]) >>`,
		Id:         "NodeVar",
		NTType:     9,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeVar("", X[0])
		},
	},
	ProdTabEntry{
		String: `NodeIn : in "{" DeclarationLst "}"	<<  >>`,
		Id:         "NodeIn",
		NTType:     10,
		Index:      18,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NodeIn : empty	<<  >>`,
		Id:         "NodeIn",
		NTType:     10,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `NodeOut : out "{" DeclarationLst "}"	<<  >>`,
		Id:         "NodeOut",
		NTType:     11,
		Index:      20,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NodeOut : empty	<<  >>`,
		Id:         "NodeOut",
		NTType:     11,
		Index:      21,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `NodeProc : "process" "{" StmtLst "}"	<<  >>`,
		Id:         "NodeProc",
		NTType:     12,
		Index:      22,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NodeProc : "process" "{" "}"	<<  >>`,
		Id:         "NodeProc",
		NTType:     12,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NodeProc : empty	<<  >>`,
		Id:         "NodeProc",
		NTType:     12,
		Index:      24,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `DeclarationStmt : Type varId stmtEnd	<<  >>`,
		Id:         "DeclarationStmt",
		NTType:     13,
		Index:      25,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DeclarationStmt : Type varId Assignment stmtEnd	<<  >>`,
		Id:         "DeclarationStmt",
		NTType:     13,
		Index:      26,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DeclarationLst : DeclarationStmt DeclarationLst	<<  >>`,
		Id:         "DeclarationLst",
		NTType:     14,
		Index:      27,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DeclarationLst : DeclarationStmt	<< ast.NewDeclarationList(X[0], X[0]) >>`,
		Id:         "DeclarationLst",
		NTType:     14,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclarationList(X[0], X[0])
		},
	},
	ProdTabEntry{
		String: `Condition : LogicalExpr logicOp Condition	<<  >>`,
		Id:         "Condition",
		NTType:     15,
		Index:      29,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Condition : LogicalExpr	<<  >>`,
		Id:         "Condition",
		NTType:     15,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assignment : assignOp Expr	<<  >>`,
		Id:         "Assignment",
		NTType:     16,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AssignStmt : NodeVar Assignment stmtEnd	<<  >>`,
		Id:         "AssignStmt",
		NTType:     17,
		Index:      32,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ControlStmt : IfStmt	<<  >>`,
		Id:         "ControlStmt",
		NTType:     18,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ControlStmt : WhileStmt	<<  >>`,
		Id:         "ControlStmt",
		NTType:     18,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IfStmt : "if" "(" Condition ")" "{" StmtLst "}"	<<  >>`,
		Id:         "IfStmt",
		NTType:     19,
		Index:      35,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `WhileStmt : "while" "(" Condition ")" "{" StmtLst "}"	<<  >>`,
		Id:         "WhileStmt",
		NTType:     20,
		Index:      36,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Stmt : DeclarationStmt	<<  >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Stmt : AssignStmt	<<  >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Stmt : ControlStmt	<<  >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StmtLst : Stmt StmtLst	<<  >>`,
		Id:         "StmtLst",
		NTType:     22,
		Index:      40,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StmtLst : Stmt	<<  >>`,
		Id:         "StmtLst",
		NTType:     22,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expr : AritExpr	<<  >>`,
		Id:         "Expr",
		NTType:     23,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expr : LogicalExpr	<<  >>`,
		Id:         "Expr",
		NTType:     23,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LogicalExpr : NodeVar compOp NodeVar	<<  >>`,
		Id:         "LogicalExpr",
		NTType:     24,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AritExpr : AritExpr "+" AritExpr	<< ast.Add(X[0], X[2]) >>`,
		Id:         "AritExpr",
		NTType:     25,
		Index:      45,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Add(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `AritExpr : AritExpr "-" AritExpr	<< ast.Sub(X[0], X[2]) >>`,
		Id:         "AritExpr",
		NTType:     25,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Sub(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `AritExpr : Term	<<  >>`,
		Id:         "AritExpr",
		NTType:     25,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term : Term "*" Factor	<< ast.Mul(X[0], X[2]) >>`,
		Id:         "Term",
		NTType:     26,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Mul(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Term "/" Factor	<< ast.Div(X[0], X[2]) >>`,
		Id:         "Term",
		NTType:     26,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Div(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Factor	<<  >>`,
		Id:         "Term",
		NTType:     26,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : int64	<< util.IntValue(X[0].(*token.Token).Lit) >>`,
		Id:         "Factor",
		NTType:     27,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return util.IntValue(X[0].(*token.Token).Lit)
		},
	},
	ProdTabEntry{
		String: `Factor : NodeVar	<<  >>`,
		Id:         "Factor",
		NTType:     27,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
}
