S0{
	S' : •ProgramDeclarationLst «␚»
	ProgramDeclarationLst : •NodeLst ConnLst «␚»
	NodeLst : •Node «nodeId»
	NodeLst : •Node NodeLst «nodeId»
	Node : •node nodeId { NodeIn NodeOut NodeProc } «nodeId»
	Node : •node nodeId { NodeIn NodeOut NodeProc } «node»
}
Transitions:
	ProgramDeclarationLst -> 1
	NodeLst -> 2
	Node -> 3
	node -> 4


S1{
	S' : ProgramDeclarationLst• «␚»
}
Transitions:


S2{
	ProgramDeclarationLst : NodeLst •ConnLst «␚»
	ConnLst : •Conn «␚»
	ConnLst : •Conn ConnLst «␚»
	Conn : •ConnOut -> ConnIn stmtEnd «␚»
	Conn : •ConnOut -> ConnIn stmtEnd «nodeId»
	ConnOut : •nodeId . out . varId «->»
	ConnOut : •nodeId . out «->»
}
Transitions:
	ConnLst -> 5
	nodeId -> 6
	Conn -> 7
	ConnOut -> 8


S3{
	NodeLst : Node• «nodeId»
	NodeLst : Node •NodeLst «nodeId»
	NodeLst : •Node «nodeId»
	NodeLst : •Node NodeLst «nodeId»
	Node : •node nodeId { NodeIn NodeOut NodeProc } «nodeId»
	Node : •node nodeId { NodeIn NodeOut NodeProc } «node»
}
Transitions:
	Node -> 3
	node -> 4
	NodeLst -> 9


S4{
	Node : node •nodeId { NodeIn NodeOut NodeProc } «nodeId»
	Node : node •nodeId { NodeIn NodeOut NodeProc } «node»
}
Transitions:
	nodeId -> 10


S5{
	ProgramDeclarationLst : NodeLst ConnLst• «␚»
}
Transitions:


S6{
	ConnOut : nodeId •. out . varId «->»
	ConnOut : nodeId •. out «->»
}
Transitions:
	. -> 11


S7{
	ConnLst : Conn• «␚»
	ConnLst : Conn •ConnLst «␚»
	ConnLst : •Conn «␚»
	ConnLst : •Conn ConnLst «␚»
	Conn : •ConnOut -> ConnIn stmtEnd «␚»
	Conn : •ConnOut -> ConnIn stmtEnd «nodeId»
	ConnOut : •nodeId . out . varId «->»
	ConnOut : •nodeId . out «->»
}
Transitions:
	nodeId -> 6
	Conn -> 7
	ConnOut -> 8
	ConnLst -> 12


S8{
	Conn : ConnOut •-> ConnIn stmtEnd «␚»
	Conn : ConnOut •-> ConnIn stmtEnd «nodeId»
}
Transitions:
	-> -> 13


S9{
	NodeLst : Node NodeLst• «nodeId»
}
Transitions:


S10{
	Node : node nodeId •{ NodeIn NodeOut NodeProc } «nodeId»
	Node : node nodeId •{ NodeIn NodeOut NodeProc } «node»
}
Transitions:
	{ -> 14


S11{
	ConnOut : nodeId . •out . varId «->»
	ConnOut : nodeId . •out «->»
}
Transitions:
	out -> 15


S12{
	ConnLst : Conn ConnLst• «␚»
}
Transitions:


S13{
	Conn : ConnOut -> •ConnIn stmtEnd «␚»
	Conn : ConnOut -> •ConnIn stmtEnd «nodeId»
	ConnIn : •nodeId . in . varId «stmtEnd»
	ConnIn : •nodeId . in «stmtEnd»
}
Transitions:
	nodeId -> 16
	ConnIn -> 17


S14{
	Node : node nodeId { •NodeIn NodeOut NodeProc } «nodeId»
	Node : node nodeId { •NodeIn NodeOut NodeProc } «node»
	NodeIn : •in { DeclarationLst } «out»
	NodeIn : •in { DeclarationLst } «process»
	NodeIn : •in { DeclarationLst } «}»
	NodeIn : empty• «out»
	NodeIn : empty• «process»
	NodeIn : empty• «}»
}
Transitions:
	NodeIn -> 18
	in -> 19


S15{
	ConnOut : nodeId . out •. varId «->»
	ConnOut : nodeId . out• «->»
}
Transitions:
	. -> 20


S16{
	ConnIn : nodeId •. in . varId «stmtEnd»
	ConnIn : nodeId •. in «stmtEnd»
}
Transitions:
	. -> 21


S17{
	Conn : ConnOut -> ConnIn •stmtEnd «␚»
	Conn : ConnOut -> ConnIn •stmtEnd «nodeId»
}
Transitions:
	stmtEnd -> 22


S18{
	Node : node nodeId { NodeIn •NodeOut NodeProc } «nodeId»
	Node : node nodeId { NodeIn •NodeOut NodeProc } «node»
	NodeOut : •out { DeclarationLst } «process»
	NodeOut : •out { DeclarationLst } «}»
	NodeOut : empty• «process»
	NodeOut : empty• «}»
}
Transitions:
	NodeOut -> 23
	out -> 24


S19{
	NodeIn : in •{ DeclarationLst } «out»
	NodeIn : in •{ DeclarationLst } «process»
	NodeIn : in •{ DeclarationLst } «}»
}
Transitions:
	{ -> 25


S20{
	ConnOut : nodeId . out . •varId «->»
}
Transitions:
	varId -> 26


S21{
	ConnIn : nodeId . •in . varId «stmtEnd»
	ConnIn : nodeId . •in «stmtEnd»
}
Transitions:
	in -> 27


S22{
	Conn : ConnOut -> ConnIn stmtEnd• «␚»
	Conn : ConnOut -> ConnIn stmtEnd• «nodeId»
}
Transitions:


S23{
	Node : node nodeId { NodeIn NodeOut •NodeProc } «nodeId»
	Node : node nodeId { NodeIn NodeOut •NodeProc } «node»
	NodeProc : •process { StmtLst } «}»
	NodeProc : •process { } «}»
	NodeProc : empty• «}»
}
Transitions:
	NodeProc -> 28
	process -> 29


S24{
	NodeOut : out •{ DeclarationLst } «process»
	NodeOut : out •{ DeclarationLst } «}»
}
Transitions:
	{ -> 30


S25{
	NodeIn : in { •DeclarationLst } «out»
	NodeIn : in { •DeclarationLst } «process»
	NodeIn : in { •DeclarationLst } «}»
	DeclarationLst : •DeclarationStmt DeclarationLst «}»
	DeclarationLst : •DeclarationStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
}
Transitions:
	Type -> 31
	int -> 32
	bool -> 33
	string -> 34
	DeclarationLst -> 35
	DeclarationStmt -> 36


S26{
	ConnOut : nodeId . out . varId• «->»
}
Transitions:


S27{
	ConnIn : nodeId . in •. varId «stmtEnd»
	ConnIn : nodeId . in• «stmtEnd»
}
Transitions:
	. -> 37


S28{
	Node : node nodeId { NodeIn NodeOut NodeProc •} «nodeId»
	Node : node nodeId { NodeIn NodeOut NodeProc •} «node»
}
Transitions:
	} -> 38


S29{
	NodeProc : process •{ StmtLst } «}»
	NodeProc : process •{ } «}»
}
Transitions:
	{ -> 39


S30{
	NodeOut : out { •DeclarationLst } «process»
	NodeOut : out { •DeclarationLst } «}»
	DeclarationLst : •DeclarationStmt DeclarationLst «}»
	DeclarationLst : •DeclarationStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
}
Transitions:
	Type -> 31
	int -> 32
	bool -> 33
	string -> 34
	DeclarationStmt -> 36
	DeclarationLst -> 40


S31{
	DeclarationStmt : Type •varId stmtEnd «bool»
	DeclarationStmt : Type •varId stmtEnd «int»
	DeclarationStmt : Type •varId stmtEnd «string»
	DeclarationStmt : Type •varId Assignment stmtEnd «bool»
	DeclarationStmt : Type •varId Assignment stmtEnd «int»
	DeclarationStmt : Type •varId Assignment stmtEnd «string»
	DeclarationStmt : Type •varId stmtEnd «}»
	DeclarationStmt : Type •varId Assignment stmtEnd «}»
}
Transitions:
	varId -> 41


S32{
	Type : int• «varId»
}
Transitions:


S33{
	Type : bool• «varId»
}
Transitions:


S34{
	Type : string• «varId»
}
Transitions:


S35{
	NodeIn : in { DeclarationLst •} «out»
	NodeIn : in { DeclarationLst •} «process»
	NodeIn : in { DeclarationLst •} «}»
}
Transitions:
	} -> 42


S36{
	DeclarationLst : DeclarationStmt •DeclarationLst «}»
	DeclarationLst : DeclarationStmt• «}»
	DeclarationLst : •DeclarationStmt DeclarationLst «}»
	DeclarationLst : •DeclarationStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
}
Transitions:
	Type -> 31
	int -> 32
	bool -> 33
	string -> 34
	DeclarationStmt -> 36
	DeclarationLst -> 43


S37{
	ConnIn : nodeId . in . •varId «stmtEnd»
}
Transitions:
	varId -> 44


S38{
	Node : node nodeId { NodeIn NodeOut NodeProc }• «nodeId»
	Node : node nodeId { NodeIn NodeOut NodeProc }• «node»
}
Transitions:


S39{
	NodeProc : process { •StmtLst } «}»
	NodeProc : process { •} «}»
	StmtLst : •Stmt StmtLst «}»
	StmtLst : •Stmt «}»
	Stmt : •DeclarationStmt «bool»
	Stmt : •DeclarationStmt «if»
	Stmt : •DeclarationStmt «in»
	Stmt : •DeclarationStmt «int»
	Stmt : •DeclarationStmt «out»
	Stmt : •DeclarationStmt «string»
	Stmt : •DeclarationStmt «varId»
	Stmt : •DeclarationStmt «while»
	Stmt : •AssignStmt «bool»
	Stmt : •AssignStmt «if»
	Stmt : •AssignStmt «in»
	Stmt : •AssignStmt «int»
	Stmt : •AssignStmt «out»
	Stmt : •AssignStmt «string»
	Stmt : •AssignStmt «varId»
	Stmt : •AssignStmt «while»
	Stmt : •ControlStmt «bool»
	Stmt : •ControlStmt «if»
	Stmt : •ControlStmt «in»
	Stmt : •ControlStmt «int»
	Stmt : •ControlStmt «out»
	Stmt : •ControlStmt «string»
	Stmt : •ControlStmt «varId»
	Stmt : •ControlStmt «while»
	Stmt : •DeclarationStmt «}»
	Stmt : •AssignStmt «}»
	Stmt : •ControlStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «if»
	DeclarationStmt : •Type varId Assignment stmtEnd «if»
	DeclarationStmt : •Type varId stmtEnd «in»
	DeclarationStmt : •Type varId Assignment stmtEnd «in»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «out»
	DeclarationStmt : •Type varId Assignment stmtEnd «out»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «varId»
	DeclarationStmt : •Type varId Assignment stmtEnd «varId»
	DeclarationStmt : •Type varId stmtEnd «while»
	DeclarationStmt : •Type varId Assignment stmtEnd «while»
	AssignStmt : •NodeVar Assignment stmtEnd «bool»
	AssignStmt : •NodeVar Assignment stmtEnd «if»
	AssignStmt : •NodeVar Assignment stmtEnd «in»
	AssignStmt : •NodeVar Assignment stmtEnd «int»
	AssignStmt : •NodeVar Assignment stmtEnd «out»
	AssignStmt : •NodeVar Assignment stmtEnd «string»
	AssignStmt : •NodeVar Assignment stmtEnd «varId»
	AssignStmt : •NodeVar Assignment stmtEnd «while»
	ControlStmt : •IfStmt «bool»
	ControlStmt : •WhileStmt «bool»
	ControlStmt : •IfStmt «if»
	ControlStmt : •WhileStmt «if»
	ControlStmt : •IfStmt «in»
	ControlStmt : •WhileStmt «in»
	ControlStmt : •IfStmt «int»
	ControlStmt : •WhileStmt «int»
	ControlStmt : •IfStmt «out»
	ControlStmt : •WhileStmt «out»
	ControlStmt : •IfStmt «string»
	ControlStmt : •WhileStmt «string»
	ControlStmt : •IfStmt «varId»
	ControlStmt : •WhileStmt «varId»
	ControlStmt : •IfStmt «while»
	ControlStmt : •WhileStmt «while»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	AssignStmt : •NodeVar Assignment stmtEnd «}»
	ControlStmt : •IfStmt «}»
	ControlStmt : •WhileStmt «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
	NodeVar : •in . varId «assignOp»
	NodeVar : •out . varId «assignOp»
	NodeVar : •varId «assignOp»
	IfStmt : •if ( Condition ) { StmtLst } «bool»
	WhileStmt : •while ( Condition ) { StmtLst } «bool»
	IfStmt : •if ( Condition ) { StmtLst } «if»
	WhileStmt : •while ( Condition ) { StmtLst } «if»
	IfStmt : •if ( Condition ) { StmtLst } «in»
	WhileStmt : •while ( Condition ) { StmtLst } «in»
	IfStmt : •if ( Condition ) { StmtLst } «int»
	WhileStmt : •while ( Condition ) { StmtLst } «int»
	IfStmt : •if ( Condition ) { StmtLst } «out»
	WhileStmt : •while ( Condition ) { StmtLst } «out»
	IfStmt : •if ( Condition ) { StmtLst } «string»
	WhileStmt : •while ( Condition ) { StmtLst } «string»
	IfStmt : •if ( Condition ) { StmtLst } «varId»
	WhileStmt : •while ( Condition ) { StmtLst } «varId»
	IfStmt : •if ( Condition ) { StmtLst } «while»
	WhileStmt : •while ( Condition ) { StmtLst } «while»
	IfStmt : •if ( Condition ) { StmtLst } «}»
	WhileStmt : •while ( Condition ) { StmtLst } «}»
}
Transitions:
	int -> 32
	bool -> 33
	string -> 34
	} -> 45
	out -> 46
	varId -> 47
	in -> 48
	Type -> 49
	NodeVar -> 50
	StmtLst -> 51
	DeclarationStmt -> 52
	AssignStmt -> 53
	ControlStmt -> 54
	IfStmt -> 55
	WhileStmt -> 56
	if -> 57
	while -> 58
	Stmt -> 59


S40{
	NodeOut : out { DeclarationLst •} «process»
	NodeOut : out { DeclarationLst •} «}»
}
Transitions:
	} -> 60


S41{
	DeclarationStmt : Type varId •stmtEnd «bool»
	DeclarationStmt : Type varId •stmtEnd «int»
	DeclarationStmt : Type varId •stmtEnd «string»
	DeclarationStmt : Type varId •Assignment stmtEnd «bool»
	DeclarationStmt : Type varId •Assignment stmtEnd «int»
	DeclarationStmt : Type varId •Assignment stmtEnd «string»
	DeclarationStmt : Type varId •stmtEnd «}»
	DeclarationStmt : Type varId •Assignment stmtEnd «}»
	Assignment : •assignOp Expr «stmtEnd»
}
Transitions:
	stmtEnd -> 61
	Assignment -> 62
	assignOp -> 63


S42{
	NodeIn : in { DeclarationLst }• «out»
	NodeIn : in { DeclarationLst }• «process»
	NodeIn : in { DeclarationLst }• «}»
}
Transitions:


S43{
	DeclarationLst : DeclarationStmt DeclarationLst• «}»
}
Transitions:


S44{
	ConnIn : nodeId . in . varId• «stmtEnd»
}
Transitions:


S45{
	NodeProc : process { }• «}»
}
Transitions:


S46{
	NodeVar : out •. varId «assignOp»
}
Transitions:
	. -> 64


S47{
	NodeVar : varId• «assignOp»
}
Transitions:


S48{
	NodeVar : in •. varId «assignOp»
}
Transitions:
	. -> 65


S49{
	DeclarationStmt : Type •varId stmtEnd «bool»
	DeclarationStmt : Type •varId Assignment stmtEnd «bool»
	DeclarationStmt : Type •varId stmtEnd «if»
	DeclarationStmt : Type •varId Assignment stmtEnd «if»
	DeclarationStmt : Type •varId stmtEnd «in»
	DeclarationStmt : Type •varId Assignment stmtEnd «in»
	DeclarationStmt : Type •varId stmtEnd «int»
	DeclarationStmt : Type •varId Assignment stmtEnd «int»
	DeclarationStmt : Type •varId stmtEnd «out»
	DeclarationStmt : Type •varId Assignment stmtEnd «out»
	DeclarationStmt : Type •varId stmtEnd «string»
	DeclarationStmt : Type •varId Assignment stmtEnd «string»
	DeclarationStmt : Type •varId stmtEnd «varId»
	DeclarationStmt : Type •varId Assignment stmtEnd «varId»
	DeclarationStmt : Type •varId stmtEnd «while»
	DeclarationStmt : Type •varId Assignment stmtEnd «while»
	DeclarationStmt : Type •varId stmtEnd «}»
	DeclarationStmt : Type •varId Assignment stmtEnd «}»
}
Transitions:
	varId -> 66


S50{
	AssignStmt : NodeVar •Assignment stmtEnd «bool»
	AssignStmt : NodeVar •Assignment stmtEnd «if»
	AssignStmt : NodeVar •Assignment stmtEnd «in»
	AssignStmt : NodeVar •Assignment stmtEnd «int»
	AssignStmt : NodeVar •Assignment stmtEnd «out»
	AssignStmt : NodeVar •Assignment stmtEnd «string»
	AssignStmt : NodeVar •Assignment stmtEnd «varId»
	AssignStmt : NodeVar •Assignment stmtEnd «while»
	AssignStmt : NodeVar •Assignment stmtEnd «}»
	Assignment : •assignOp Expr «stmtEnd»
}
Transitions:
	assignOp -> 63
	Assignment -> 67


S51{
	NodeProc : process { StmtLst •} «}»
}
Transitions:
	} -> 68


S52{
	Stmt : DeclarationStmt• «bool»
	Stmt : DeclarationStmt• «if»
	Stmt : DeclarationStmt• «in»
	Stmt : DeclarationStmt• «int»
	Stmt : DeclarationStmt• «out»
	Stmt : DeclarationStmt• «string»
	Stmt : DeclarationStmt• «varId»
	Stmt : DeclarationStmt• «while»
	Stmt : DeclarationStmt• «}»
}
Transitions:


S53{
	Stmt : AssignStmt• «bool»
	Stmt : AssignStmt• «if»
	Stmt : AssignStmt• «in»
	Stmt : AssignStmt• «int»
	Stmt : AssignStmt• «out»
	Stmt : AssignStmt• «string»
	Stmt : AssignStmt• «varId»
	Stmt : AssignStmt• «while»
	Stmt : AssignStmt• «}»
}
Transitions:


S54{
	Stmt : ControlStmt• «bool»
	Stmt : ControlStmt• «if»
	Stmt : ControlStmt• «in»
	Stmt : ControlStmt• «int»
	Stmt : ControlStmt• «out»
	Stmt : ControlStmt• «string»
	Stmt : ControlStmt• «varId»
	Stmt : ControlStmt• «while»
	Stmt : ControlStmt• «}»
}
Transitions:


S55{
	ControlStmt : IfStmt• «bool»
	ControlStmt : IfStmt• «if»
	ControlStmt : IfStmt• «in»
	ControlStmt : IfStmt• «int»
	ControlStmt : IfStmt• «out»
	ControlStmt : IfStmt• «string»
	ControlStmt : IfStmt• «varId»
	ControlStmt : IfStmt• «while»
	ControlStmt : IfStmt• «}»
}
Transitions:


S56{
	ControlStmt : WhileStmt• «bool»
	ControlStmt : WhileStmt• «if»
	ControlStmt : WhileStmt• «in»
	ControlStmt : WhileStmt• «int»
	ControlStmt : WhileStmt• «out»
	ControlStmt : WhileStmt• «string»
	ControlStmt : WhileStmt• «varId»
	ControlStmt : WhileStmt• «while»
	ControlStmt : WhileStmt• «}»
}
Transitions:


S57{
	IfStmt : if •( Condition ) { StmtLst } «bool»
	IfStmt : if •( Condition ) { StmtLst } «if»
	IfStmt : if •( Condition ) { StmtLst } «in»
	IfStmt : if •( Condition ) { StmtLst } «int»
	IfStmt : if •( Condition ) { StmtLst } «out»
	IfStmt : if •( Condition ) { StmtLst } «string»
	IfStmt : if •( Condition ) { StmtLst } «varId»
	IfStmt : if •( Condition ) { StmtLst } «while»
	IfStmt : if •( Condition ) { StmtLst } «}»
}
Transitions:
	( -> 69


S58{
	WhileStmt : while •( Condition ) { StmtLst } «bool»
	WhileStmt : while •( Condition ) { StmtLst } «if»
	WhileStmt : while •( Condition ) { StmtLst } «in»
	WhileStmt : while •( Condition ) { StmtLst } «int»
	WhileStmt : while •( Condition ) { StmtLst } «out»
	WhileStmt : while •( Condition ) { StmtLst } «string»
	WhileStmt : while •( Condition ) { StmtLst } «varId»
	WhileStmt : while •( Condition ) { StmtLst } «while»
	WhileStmt : while •( Condition ) { StmtLst } «}»
}
Transitions:
	( -> 70


S59{
	StmtLst : Stmt •StmtLst «}»
	StmtLst : Stmt• «}»
	StmtLst : •Stmt StmtLst «}»
	StmtLst : •Stmt «}»
	Stmt : •DeclarationStmt «bool»
	Stmt : •DeclarationStmt «if»
	Stmt : •DeclarationStmt «in»
	Stmt : •DeclarationStmt «int»
	Stmt : •DeclarationStmt «out»
	Stmt : •DeclarationStmt «string»
	Stmt : •DeclarationStmt «varId»
	Stmt : •DeclarationStmt «while»
	Stmt : •AssignStmt «bool»
	Stmt : •AssignStmt «if»
	Stmt : •AssignStmt «in»
	Stmt : •AssignStmt «int»
	Stmt : •AssignStmt «out»
	Stmt : •AssignStmt «string»
	Stmt : •AssignStmt «varId»
	Stmt : •AssignStmt «while»
	Stmt : •ControlStmt «bool»
	Stmt : •ControlStmt «if»
	Stmt : •ControlStmt «in»
	Stmt : •ControlStmt «int»
	Stmt : •ControlStmt «out»
	Stmt : •ControlStmt «string»
	Stmt : •ControlStmt «varId»
	Stmt : •ControlStmt «while»
	Stmt : •DeclarationStmt «}»
	Stmt : •AssignStmt «}»
	Stmt : •ControlStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «if»
	DeclarationStmt : •Type varId Assignment stmtEnd «if»
	DeclarationStmt : •Type varId stmtEnd «in»
	DeclarationStmt : •Type varId Assignment stmtEnd «in»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «out»
	DeclarationStmt : •Type varId Assignment stmtEnd «out»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «varId»
	DeclarationStmt : •Type varId Assignment stmtEnd «varId»
	DeclarationStmt : •Type varId stmtEnd «while»
	DeclarationStmt : •Type varId Assignment stmtEnd «while»
	AssignStmt : •NodeVar Assignment stmtEnd «bool»
	AssignStmt : •NodeVar Assignment stmtEnd «if»
	AssignStmt : •NodeVar Assignment stmtEnd «in»
	AssignStmt : •NodeVar Assignment stmtEnd «int»
	AssignStmt : •NodeVar Assignment stmtEnd «out»
	AssignStmt : •NodeVar Assignment stmtEnd «string»
	AssignStmt : •NodeVar Assignment stmtEnd «varId»
	AssignStmt : •NodeVar Assignment stmtEnd «while»
	ControlStmt : •IfStmt «bool»
	ControlStmt : •WhileStmt «bool»
	ControlStmt : •IfStmt «if»
	ControlStmt : •WhileStmt «if»
	ControlStmt : •IfStmt «in»
	ControlStmt : •WhileStmt «in»
	ControlStmt : •IfStmt «int»
	ControlStmt : •WhileStmt «int»
	ControlStmt : •IfStmt «out»
	ControlStmt : •WhileStmt «out»
	ControlStmt : •IfStmt «string»
	ControlStmt : •WhileStmt «string»
	ControlStmt : •IfStmt «varId»
	ControlStmt : •WhileStmt «varId»
	ControlStmt : •IfStmt «while»
	ControlStmt : •WhileStmt «while»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	AssignStmt : •NodeVar Assignment stmtEnd «}»
	ControlStmt : •IfStmt «}»
	ControlStmt : •WhileStmt «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
	NodeVar : •in . varId «assignOp»
	NodeVar : •out . varId «assignOp»
	NodeVar : •varId «assignOp»
	IfStmt : •if ( Condition ) { StmtLst } «bool»
	WhileStmt : •while ( Condition ) { StmtLst } «bool»
	IfStmt : •if ( Condition ) { StmtLst } «if»
	WhileStmt : •while ( Condition ) { StmtLst } «if»
	IfStmt : •if ( Condition ) { StmtLst } «in»
	WhileStmt : •while ( Condition ) { StmtLst } «in»
	IfStmt : •if ( Condition ) { StmtLst } «int»
	WhileStmt : •while ( Condition ) { StmtLst } «int»
	IfStmt : •if ( Condition ) { StmtLst } «out»
	WhileStmt : •while ( Condition ) { StmtLst } «out»
	IfStmt : •if ( Condition ) { StmtLst } «string»
	WhileStmt : •while ( Condition ) { StmtLst } «string»
	IfStmt : •if ( Condition ) { StmtLst } «varId»
	WhileStmt : •while ( Condition ) { StmtLst } «varId»
	IfStmt : •if ( Condition ) { StmtLst } «while»
	WhileStmt : •while ( Condition ) { StmtLst } «while»
	IfStmt : •if ( Condition ) { StmtLst } «}»
	WhileStmt : •while ( Condition ) { StmtLst } «}»
}
Transitions:
	int -> 32
	bool -> 33
	string -> 34
	out -> 46
	varId -> 47
	in -> 48
	Type -> 49
	NodeVar -> 50
	DeclarationStmt -> 52
	AssignStmt -> 53
	ControlStmt -> 54
	IfStmt -> 55
	WhileStmt -> 56
	if -> 57
	while -> 58
	Stmt -> 59
	StmtLst -> 71


S60{
	NodeOut : out { DeclarationLst }• «process»
	NodeOut : out { DeclarationLst }• «}»
}
Transitions:


S61{
	DeclarationStmt : Type varId stmtEnd• «bool»
	DeclarationStmt : Type varId stmtEnd• «int»
	DeclarationStmt : Type varId stmtEnd• «string»
	DeclarationStmt : Type varId stmtEnd• «}»
}
Transitions:


S62{
	DeclarationStmt : Type varId Assignment •stmtEnd «bool»
	DeclarationStmt : Type varId Assignment •stmtEnd «int»
	DeclarationStmt : Type varId Assignment •stmtEnd «string»
	DeclarationStmt : Type varId Assignment •stmtEnd «}»
}
Transitions:
	stmtEnd -> 72


S63{
	Assignment : assignOp •Expr «stmtEnd»
	Expr : •AritExpr «stmtEnd»
	Expr : •LogicalExpr «stmtEnd»
	AritExpr : •AritExpr + AritExpr «stmtEnd»
	AritExpr : •AritExpr - AritExpr «stmtEnd»
	AritExpr : •Term «stmtEnd»
	LogicalExpr : •NodeVar compOp NodeVar «stmtEnd»
	AritExpr : •AritExpr + AritExpr «+»
	AritExpr : •AritExpr - AritExpr «+»
	AritExpr : •Term «+»
	AritExpr : •AritExpr + AritExpr «-»
	AritExpr : •AritExpr - AritExpr «-»
	AritExpr : •Term «-»
	Term : •Term * Factor «stmtEnd»
	Term : •Term / Factor «stmtEnd»
	Term : •Factor «stmtEnd»
	NodeVar : •in . varId «compOp»
	NodeVar : •out . varId «compOp»
	NodeVar : •varId «compOp»
	Term : •Term * Factor «+»
	Term : •Term / Factor «+»
	Term : •Factor «+»
	Term : •Term * Factor «-»
	Term : •Term / Factor «-»
	Term : •Factor «-»
	Term : •Term * Factor «*»
	Term : •Term / Factor «*»
	Term : •Factor «*»
	Term : •Term * Factor «/»
	Term : •Term / Factor «/»
	Term : •Factor «/»
	Factor : •int64 «stmtEnd»
	Factor : •NodeVar «stmtEnd»
	Factor : •int64 «+»
	Factor : •NodeVar «+»
	Factor : •int64 «-»
	Factor : •NodeVar «-»
	Factor : •int64 «*»
	Factor : •NodeVar «*»
	Factor : •int64 «/»
	Factor : •NodeVar «/»
	NodeVar : •in . varId «stmtEnd»
	NodeVar : •out . varId «stmtEnd»
	NodeVar : •varId «stmtEnd»
	NodeVar : •in . varId «+»
	NodeVar : •out . varId «+»
	NodeVar : •varId «+»
	NodeVar : •in . varId «-»
	NodeVar : •out . varId «-»
	NodeVar : •varId «-»
	NodeVar : •in . varId «*»
	NodeVar : •out . varId «*»
	NodeVar : •varId «*»
	NodeVar : •in . varId «/»
	NodeVar : •out . varId «/»
	NodeVar : •varId «/»
}
Transitions:
	out -> 73
	varId -> 74
	in -> 75
	NodeVar -> 76
	LogicalExpr -> 77
	Expr -> 78
	AritExpr -> 79
	Term -> 80
	Factor -> 81
	int64 -> 82


S64{
	NodeVar : out . •varId «assignOp»
}
Transitions:
	varId -> 83


S65{
	NodeVar : in . •varId «assignOp»
}
Transitions:
	varId -> 84


S66{
	DeclarationStmt : Type varId •stmtEnd «bool»
	DeclarationStmt : Type varId •Assignment stmtEnd «bool»
	DeclarationStmt : Type varId •stmtEnd «if»
	DeclarationStmt : Type varId •Assignment stmtEnd «if»
	DeclarationStmt : Type varId •stmtEnd «in»
	DeclarationStmt : Type varId •Assignment stmtEnd «in»
	DeclarationStmt : Type varId •stmtEnd «int»
	DeclarationStmt : Type varId •Assignment stmtEnd «int»
	DeclarationStmt : Type varId •stmtEnd «out»
	DeclarationStmt : Type varId •Assignment stmtEnd «out»
	DeclarationStmt : Type varId •stmtEnd «string»
	DeclarationStmt : Type varId •Assignment stmtEnd «string»
	DeclarationStmt : Type varId •stmtEnd «varId»
	DeclarationStmt : Type varId •Assignment stmtEnd «varId»
	DeclarationStmt : Type varId •stmtEnd «while»
	DeclarationStmt : Type varId •Assignment stmtEnd «while»
	DeclarationStmt : Type varId •stmtEnd «}»
	DeclarationStmt : Type varId •Assignment stmtEnd «}»
	Assignment : •assignOp Expr «stmtEnd»
}
Transitions:
	assignOp -> 63
	stmtEnd -> 85
	Assignment -> 86


S67{
	AssignStmt : NodeVar Assignment •stmtEnd «bool»
	AssignStmt : NodeVar Assignment •stmtEnd «if»
	AssignStmt : NodeVar Assignment •stmtEnd «in»
	AssignStmt : NodeVar Assignment •stmtEnd «int»
	AssignStmt : NodeVar Assignment •stmtEnd «out»
	AssignStmt : NodeVar Assignment •stmtEnd «string»
	AssignStmt : NodeVar Assignment •stmtEnd «varId»
	AssignStmt : NodeVar Assignment •stmtEnd «while»
	AssignStmt : NodeVar Assignment •stmtEnd «}»
}
Transitions:
	stmtEnd -> 87


S68{
	NodeProc : process { StmtLst }• «}»
}
Transitions:


S69{
	IfStmt : if ( •Condition ) { StmtLst } «bool»
	IfStmt : if ( •Condition ) { StmtLst } «if»
	IfStmt : if ( •Condition ) { StmtLst } «in»
	IfStmt : if ( •Condition ) { StmtLst } «int»
	IfStmt : if ( •Condition ) { StmtLst } «out»
	IfStmt : if ( •Condition ) { StmtLst } «string»
	IfStmt : if ( •Condition ) { StmtLst } «varId»
	IfStmt : if ( •Condition ) { StmtLst } «while»
	IfStmt : if ( •Condition ) { StmtLst } «}»
	Condition : •LogicalExpr logicOp Condition «)»
	Condition : •LogicalExpr «)»
	LogicalExpr : •NodeVar compOp NodeVar «logicOp»
	LogicalExpr : •NodeVar compOp NodeVar «)»
	NodeVar : •in . varId «compOp»
	NodeVar : •out . varId «compOp»
	NodeVar : •varId «compOp»
}
Transitions:
	out -> 88
	varId -> 89
	in -> 90
	NodeVar -> 91
	Condition -> 92
	LogicalExpr -> 93


S70{
	WhileStmt : while ( •Condition ) { StmtLst } «bool»
	WhileStmt : while ( •Condition ) { StmtLst } «if»
	WhileStmt : while ( •Condition ) { StmtLst } «in»
	WhileStmt : while ( •Condition ) { StmtLst } «int»
	WhileStmt : while ( •Condition ) { StmtLst } «out»
	WhileStmt : while ( •Condition ) { StmtLst } «string»
	WhileStmt : while ( •Condition ) { StmtLst } «varId»
	WhileStmt : while ( •Condition ) { StmtLst } «while»
	WhileStmt : while ( •Condition ) { StmtLst } «}»
	Condition : •LogicalExpr logicOp Condition «)»
	Condition : •LogicalExpr «)»
	LogicalExpr : •NodeVar compOp NodeVar «logicOp»
	LogicalExpr : •NodeVar compOp NodeVar «)»
	NodeVar : •in . varId «compOp»
	NodeVar : •out . varId «compOp»
	NodeVar : •varId «compOp»
}
Transitions:
	out -> 88
	varId -> 89
	in -> 90
	NodeVar -> 91
	LogicalExpr -> 93
	Condition -> 94


S71{
	StmtLst : Stmt StmtLst• «}»
}
Transitions:


S72{
	DeclarationStmt : Type varId Assignment stmtEnd• «bool»
	DeclarationStmt : Type varId Assignment stmtEnd• «int»
	DeclarationStmt : Type varId Assignment stmtEnd• «string»
	DeclarationStmt : Type varId Assignment stmtEnd• «}»
}
Transitions:


S73{
	NodeVar : out •. varId «compOp»
	NodeVar : out •. varId «stmtEnd»
	NodeVar : out •. varId «+»
	NodeVar : out •. varId «-»
	NodeVar : out •. varId «*»
	NodeVar : out •. varId «/»
}
Transitions:
	. -> 95


S74{
	NodeVar : varId• «compOp»
	NodeVar : varId• «stmtEnd»
	NodeVar : varId• «+»
	NodeVar : varId• «-»
	NodeVar : varId• «*»
	NodeVar : varId• «/»
}
Transitions:


S75{
	NodeVar : in •. varId «compOp»
	NodeVar : in •. varId «stmtEnd»
	NodeVar : in •. varId «+»
	NodeVar : in •. varId «-»
	NodeVar : in •. varId «*»
	NodeVar : in •. varId «/»
}
Transitions:
	. -> 96


S76{
	LogicalExpr : NodeVar •compOp NodeVar «stmtEnd»
	Factor : NodeVar• «stmtEnd»
	Factor : NodeVar• «+»
	Factor : NodeVar• «-»
	Factor : NodeVar• «*»
	Factor : NodeVar• «/»
}
Transitions:
	compOp -> 97


S77{
	Expr : LogicalExpr• «stmtEnd»
}
Transitions:


S78{
	Assignment : assignOp Expr• «stmtEnd»
}
Transitions:


S79{
	Expr : AritExpr• «stmtEnd»
	AritExpr : AritExpr •+ AritExpr «stmtEnd»
	AritExpr : AritExpr •- AritExpr «stmtEnd»
	AritExpr : AritExpr •+ AritExpr «+»
	AritExpr : AritExpr •- AritExpr «+»
	AritExpr : AritExpr •+ AritExpr «-»
	AritExpr : AritExpr •- AritExpr «-»
}
Transitions:
	+ -> 98
	- -> 99


S80{
	AritExpr : Term• «stmtEnd»
	AritExpr : Term• «+»
	AritExpr : Term• «-»
	Term : Term •* Factor «stmtEnd»
	Term : Term •/ Factor «stmtEnd»
	Term : Term •* Factor «+»
	Term : Term •/ Factor «+»
	Term : Term •* Factor «-»
	Term : Term •/ Factor «-»
	Term : Term •* Factor «*»
	Term : Term •/ Factor «*»
	Term : Term •* Factor «/»
	Term : Term •/ Factor «/»
}
Transitions:
	* -> 100
	/ -> 101


S81{
	Term : Factor• «stmtEnd»
	Term : Factor• «+»
	Term : Factor• «-»
	Term : Factor• «*»
	Term : Factor• «/»
}
Transitions:


S82{
	Factor : int64• «stmtEnd»
	Factor : int64• «+»
	Factor : int64• «-»
	Factor : int64• «*»
	Factor : int64• «/»
}
Transitions:


S83{
	NodeVar : out . varId• «assignOp»
}
Transitions:


S84{
	NodeVar : in . varId• «assignOp»
}
Transitions:


S85{
	DeclarationStmt : Type varId stmtEnd• «bool»
	DeclarationStmt : Type varId stmtEnd• «if»
	DeclarationStmt : Type varId stmtEnd• «in»
	DeclarationStmt : Type varId stmtEnd• «int»
	DeclarationStmt : Type varId stmtEnd• «out»
	DeclarationStmt : Type varId stmtEnd• «string»
	DeclarationStmt : Type varId stmtEnd• «varId»
	DeclarationStmt : Type varId stmtEnd• «while»
	DeclarationStmt : Type varId stmtEnd• «}»
}
Transitions:


S86{
	DeclarationStmt : Type varId Assignment •stmtEnd «bool»
	DeclarationStmt : Type varId Assignment •stmtEnd «if»
	DeclarationStmt : Type varId Assignment •stmtEnd «in»
	DeclarationStmt : Type varId Assignment •stmtEnd «int»
	DeclarationStmt : Type varId Assignment •stmtEnd «out»
	DeclarationStmt : Type varId Assignment •stmtEnd «string»
	DeclarationStmt : Type varId Assignment •stmtEnd «varId»
	DeclarationStmt : Type varId Assignment •stmtEnd «while»
	DeclarationStmt : Type varId Assignment •stmtEnd «}»
}
Transitions:
	stmtEnd -> 102


S87{
	AssignStmt : NodeVar Assignment stmtEnd• «bool»
	AssignStmt : NodeVar Assignment stmtEnd• «if»
	AssignStmt : NodeVar Assignment stmtEnd• «in»
	AssignStmt : NodeVar Assignment stmtEnd• «int»
	AssignStmt : NodeVar Assignment stmtEnd• «out»
	AssignStmt : NodeVar Assignment stmtEnd• «string»
	AssignStmt : NodeVar Assignment stmtEnd• «varId»
	AssignStmt : NodeVar Assignment stmtEnd• «while»
	AssignStmt : NodeVar Assignment stmtEnd• «}»
}
Transitions:


S88{
	NodeVar : out •. varId «compOp»
}
Transitions:
	. -> 103


S89{
	NodeVar : varId• «compOp»
}
Transitions:


S90{
	NodeVar : in •. varId «compOp»
}
Transitions:
	. -> 104


S91{
	LogicalExpr : NodeVar •compOp NodeVar «logicOp»
	LogicalExpr : NodeVar •compOp NodeVar «)»
}
Transitions:
	compOp -> 105


S92{
	IfStmt : if ( Condition •) { StmtLst } «bool»
	IfStmt : if ( Condition •) { StmtLst } «if»
	IfStmt : if ( Condition •) { StmtLst } «in»
	IfStmt : if ( Condition •) { StmtLst } «int»
	IfStmt : if ( Condition •) { StmtLst } «out»
	IfStmt : if ( Condition •) { StmtLst } «string»
	IfStmt : if ( Condition •) { StmtLst } «varId»
	IfStmt : if ( Condition •) { StmtLst } «while»
	IfStmt : if ( Condition •) { StmtLst } «}»
}
Transitions:
	) -> 106


S93{
	Condition : LogicalExpr •logicOp Condition «)»
	Condition : LogicalExpr• «)»
}
Transitions:
	logicOp -> 107


S94{
	WhileStmt : while ( Condition •) { StmtLst } «bool»
	WhileStmt : while ( Condition •) { StmtLst } «if»
	WhileStmt : while ( Condition •) { StmtLst } «in»
	WhileStmt : while ( Condition •) { StmtLst } «int»
	WhileStmt : while ( Condition •) { StmtLst } «out»
	WhileStmt : while ( Condition •) { StmtLst } «string»
	WhileStmt : while ( Condition •) { StmtLst } «varId»
	WhileStmt : while ( Condition •) { StmtLst } «while»
	WhileStmt : while ( Condition •) { StmtLst } «}»
}
Transitions:
	) -> 108


S95{
	NodeVar : out . •varId «compOp»
	NodeVar : out . •varId «stmtEnd»
	NodeVar : out . •varId «+»
	NodeVar : out . •varId «-»
	NodeVar : out . •varId «*»
	NodeVar : out . •varId «/»
}
Transitions:
	varId -> 109


S96{
	NodeVar : in . •varId «compOp»
	NodeVar : in . •varId «stmtEnd»
	NodeVar : in . •varId «+»
	NodeVar : in . •varId «-»
	NodeVar : in . •varId «*»
	NodeVar : in . •varId «/»
}
Transitions:
	varId -> 110


S97{
	LogicalExpr : NodeVar compOp •NodeVar «stmtEnd»
	NodeVar : •in . varId «stmtEnd»
	NodeVar : •out . varId «stmtEnd»
	NodeVar : •varId «stmtEnd»
}
Transitions:
	out -> 111
	varId -> 112
	in -> 113
	NodeVar -> 114


S98{
	AritExpr : AritExpr + •AritExpr «stmtEnd»
	AritExpr : AritExpr + •AritExpr «+»
	AritExpr : AritExpr + •AritExpr «-»
	AritExpr : •AritExpr + AritExpr «stmtEnd»
	AritExpr : •AritExpr - AritExpr «stmtEnd»
	AritExpr : •Term «stmtEnd»
	AritExpr : •AritExpr + AritExpr «+»
	AritExpr : •AritExpr - AritExpr «+»
	AritExpr : •Term «+»
	AritExpr : •AritExpr + AritExpr «-»
	AritExpr : •AritExpr - AritExpr «-»
	AritExpr : •Term «-»
	Term : •Term * Factor «stmtEnd»
	Term : •Term / Factor «stmtEnd»
	Term : •Factor «stmtEnd»
	Term : •Term * Factor «+»
	Term : •Term / Factor «+»
	Term : •Factor «+»
	Term : •Term * Factor «-»
	Term : •Term / Factor «-»
	Term : •Factor «-»
	Term : •Term * Factor «*»
	Term : •Term / Factor «*»
	Term : •Factor «*»
	Term : •Term * Factor «/»
	Term : •Term / Factor «/»
	Term : •Factor «/»
	Factor : •int64 «stmtEnd»
	Factor : •NodeVar «stmtEnd»
	Factor : •int64 «+»
	Factor : •NodeVar «+»
	Factor : •int64 «-»
	Factor : •NodeVar «-»
	Factor : •int64 «*»
	Factor : •NodeVar «*»
	Factor : •int64 «/»
	Factor : •NodeVar «/»
	NodeVar : •in . varId «stmtEnd»
	NodeVar : •out . varId «stmtEnd»
	NodeVar : •varId «stmtEnd»
	NodeVar : •in . varId «+»
	NodeVar : •out . varId «+»
	NodeVar : •varId «+»
	NodeVar : •in . varId «-»
	NodeVar : •out . varId «-»
	NodeVar : •varId «-»
	NodeVar : •in . varId «*»
	NodeVar : •out . varId «*»
	NodeVar : •varId «*»
	NodeVar : •in . varId «/»
	NodeVar : •out . varId «/»
	NodeVar : •varId «/»
}
Transitions:
	Term -> 80
	Factor -> 81
	int64 -> 82
	out -> 115
	varId -> 116
	in -> 117
	NodeVar -> 118
	AritExpr -> 119


S99{
	AritExpr : AritExpr - •AritExpr «stmtEnd»
	AritExpr : AritExpr - •AritExpr «+»
	AritExpr : AritExpr - •AritExpr «-»
	AritExpr : •AritExpr + AritExpr «stmtEnd»
	AritExpr : •AritExpr - AritExpr «stmtEnd»
	AritExpr : •Term «stmtEnd»
	AritExpr : •AritExpr + AritExpr «+»
	AritExpr : •AritExpr - AritExpr «+»
	AritExpr : •Term «+»
	AritExpr : •AritExpr + AritExpr «-»
	AritExpr : •AritExpr - AritExpr «-»
	AritExpr : •Term «-»
	Term : •Term * Factor «stmtEnd»
	Term : •Term / Factor «stmtEnd»
	Term : •Factor «stmtEnd»
	Term : •Term * Factor «+»
	Term : •Term / Factor «+»
	Term : •Factor «+»
	Term : •Term * Factor «-»
	Term : •Term / Factor «-»
	Term : •Factor «-»
	Term : •Term * Factor «*»
	Term : •Term / Factor «*»
	Term : •Factor «*»
	Term : •Term * Factor «/»
	Term : •Term / Factor «/»
	Term : •Factor «/»
	Factor : •int64 «stmtEnd»
	Factor : •NodeVar «stmtEnd»
	Factor : •int64 «+»
	Factor : •NodeVar «+»
	Factor : •int64 «-»
	Factor : •NodeVar «-»
	Factor : •int64 «*»
	Factor : •NodeVar «*»
	Factor : •int64 «/»
	Factor : •NodeVar «/»
	NodeVar : •in . varId «stmtEnd»
	NodeVar : •out . varId «stmtEnd»
	NodeVar : •varId «stmtEnd»
	NodeVar : •in . varId «+»
	NodeVar : •out . varId «+»
	NodeVar : •varId «+»
	NodeVar : •in . varId «-»
	NodeVar : •out . varId «-»
	NodeVar : •varId «-»
	NodeVar : •in . varId «*»
	NodeVar : •out . varId «*»
	NodeVar : •varId «*»
	NodeVar : •in . varId «/»
	NodeVar : •out . varId «/»
	NodeVar : •varId «/»
}
Transitions:
	Term -> 80
	Factor -> 81
	int64 -> 82
	out -> 115
	varId -> 116
	in -> 117
	NodeVar -> 118
	AritExpr -> 120


S100{
	Term : Term * •Factor «stmtEnd»
	Term : Term * •Factor «+»
	Term : Term * •Factor «-»
	Term : Term * •Factor «*»
	Term : Term * •Factor «/»
	Factor : •int64 «stmtEnd»
	Factor : •NodeVar «stmtEnd»
	Factor : •int64 «+»
	Factor : •NodeVar «+»
	Factor : •int64 «-»
	Factor : •NodeVar «-»
	Factor : •int64 «*»
	Factor : •NodeVar «*»
	Factor : •int64 «/»
	Factor : •NodeVar «/»
	NodeVar : •in . varId «stmtEnd»
	NodeVar : •out . varId «stmtEnd»
	NodeVar : •varId «stmtEnd»
	NodeVar : •in . varId «+»
	NodeVar : •out . varId «+»
	NodeVar : •varId «+»
	NodeVar : •in . varId «-»
	NodeVar : •out . varId «-»
	NodeVar : •varId «-»
	NodeVar : •in . varId «*»
	NodeVar : •out . varId «*»
	NodeVar : •varId «*»
	NodeVar : •in . varId «/»
	NodeVar : •out . varId «/»
	NodeVar : •varId «/»
}
Transitions:
	int64 -> 82
	out -> 115
	varId -> 116
	in -> 117
	NodeVar -> 118
	Factor -> 121


S101{
	Term : Term / •Factor «stmtEnd»
	Term : Term / •Factor «+»
	Term : Term / •Factor «-»
	Term : Term / •Factor «*»
	Term : Term / •Factor «/»
	Factor : •int64 «stmtEnd»
	Factor : •NodeVar «stmtEnd»
	Factor : •int64 «+»
	Factor : •NodeVar «+»
	Factor : •int64 «-»
	Factor : •NodeVar «-»
	Factor : •int64 «*»
	Factor : •NodeVar «*»
	Factor : •int64 «/»
	Factor : •NodeVar «/»
	NodeVar : •in . varId «stmtEnd»
	NodeVar : •out . varId «stmtEnd»
	NodeVar : •varId «stmtEnd»
	NodeVar : •in . varId «+»
	NodeVar : •out . varId «+»
	NodeVar : •varId «+»
	NodeVar : •in . varId «-»
	NodeVar : •out . varId «-»
	NodeVar : •varId «-»
	NodeVar : •in . varId «*»
	NodeVar : •out . varId «*»
	NodeVar : •varId «*»
	NodeVar : •in . varId «/»
	NodeVar : •out . varId «/»
	NodeVar : •varId «/»
}
Transitions:
	int64 -> 82
	out -> 115
	varId -> 116
	in -> 117
	NodeVar -> 118
	Factor -> 122


S102{
	DeclarationStmt : Type varId Assignment stmtEnd• «bool»
	DeclarationStmt : Type varId Assignment stmtEnd• «if»
	DeclarationStmt : Type varId Assignment stmtEnd• «in»
	DeclarationStmt : Type varId Assignment stmtEnd• «int»
	DeclarationStmt : Type varId Assignment stmtEnd• «out»
	DeclarationStmt : Type varId Assignment stmtEnd• «string»
	DeclarationStmt : Type varId Assignment stmtEnd• «varId»
	DeclarationStmt : Type varId Assignment stmtEnd• «while»
	DeclarationStmt : Type varId Assignment stmtEnd• «}»
}
Transitions:


S103{
	NodeVar : out . •varId «compOp»
}
Transitions:
	varId -> 123


S104{
	NodeVar : in . •varId «compOp»
}
Transitions:
	varId -> 124


S105{
	LogicalExpr : NodeVar compOp •NodeVar «logicOp»
	LogicalExpr : NodeVar compOp •NodeVar «)»
	NodeVar : •in . varId «logicOp»
	NodeVar : •out . varId «logicOp»
	NodeVar : •varId «logicOp»
	NodeVar : •in . varId «)»
	NodeVar : •out . varId «)»
	NodeVar : •varId «)»
}
Transitions:
	out -> 125
	varId -> 126
	in -> 127
	NodeVar -> 128


S106{
	IfStmt : if ( Condition ) •{ StmtLst } «bool»
	IfStmt : if ( Condition ) •{ StmtLst } «if»
	IfStmt : if ( Condition ) •{ StmtLst } «in»
	IfStmt : if ( Condition ) •{ StmtLst } «int»
	IfStmt : if ( Condition ) •{ StmtLst } «out»
	IfStmt : if ( Condition ) •{ StmtLst } «string»
	IfStmt : if ( Condition ) •{ StmtLst } «varId»
	IfStmt : if ( Condition ) •{ StmtLst } «while»
	IfStmt : if ( Condition ) •{ StmtLst } «}»
}
Transitions:
	{ -> 129


S107{
	Condition : LogicalExpr logicOp •Condition «)»
	Condition : •LogicalExpr logicOp Condition «)»
	Condition : •LogicalExpr «)»
	LogicalExpr : •NodeVar compOp NodeVar «logicOp»
	LogicalExpr : •NodeVar compOp NodeVar «)»
	NodeVar : •in . varId «compOp»
	NodeVar : •out . varId «compOp»
	NodeVar : •varId «compOp»
}
Transitions:
	out -> 88
	varId -> 89
	in -> 90
	NodeVar -> 91
	LogicalExpr -> 93
	Condition -> 130


S108{
	WhileStmt : while ( Condition ) •{ StmtLst } «bool»
	WhileStmt : while ( Condition ) •{ StmtLst } «if»
	WhileStmt : while ( Condition ) •{ StmtLst } «in»
	WhileStmt : while ( Condition ) •{ StmtLst } «int»
	WhileStmt : while ( Condition ) •{ StmtLst } «out»
	WhileStmt : while ( Condition ) •{ StmtLst } «string»
	WhileStmt : while ( Condition ) •{ StmtLst } «varId»
	WhileStmt : while ( Condition ) •{ StmtLst } «while»
	WhileStmt : while ( Condition ) •{ StmtLst } «}»
}
Transitions:
	{ -> 131


S109{
	NodeVar : out . varId• «compOp»
	NodeVar : out . varId• «stmtEnd»
	NodeVar : out . varId• «+»
	NodeVar : out . varId• «-»
	NodeVar : out . varId• «*»
	NodeVar : out . varId• «/»
}
Transitions:


S110{
	NodeVar : in . varId• «compOp»
	NodeVar : in . varId• «stmtEnd»
	NodeVar : in . varId• «+»
	NodeVar : in . varId• «-»
	NodeVar : in . varId• «*»
	NodeVar : in . varId• «/»
}
Transitions:


S111{
	NodeVar : out •. varId «stmtEnd»
}
Transitions:
	. -> 132


S112{
	NodeVar : varId• «stmtEnd»
}
Transitions:


S113{
	NodeVar : in •. varId «stmtEnd»
}
Transitions:
	. -> 133


S114{
	LogicalExpr : NodeVar compOp NodeVar• «stmtEnd»
}
Transitions:


S115{
	NodeVar : out •. varId «stmtEnd»
	NodeVar : out •. varId «+»
	NodeVar : out •. varId «-»
	NodeVar : out •. varId «*»
	NodeVar : out •. varId «/»
}
Transitions:
	. -> 134


S116{
	NodeVar : varId• «stmtEnd»
	NodeVar : varId• «+»
	NodeVar : varId• «-»
	NodeVar : varId• «*»
	NodeVar : varId• «/»
}
Transitions:


S117{
	NodeVar : in •. varId «stmtEnd»
	NodeVar : in •. varId «+»
	NodeVar : in •. varId «-»
	NodeVar : in •. varId «*»
	NodeVar : in •. varId «/»
}
Transitions:
	. -> 135


S118{
	Factor : NodeVar• «stmtEnd»
	Factor : NodeVar• «+»
	Factor : NodeVar• «-»
	Factor : NodeVar• «*»
	Factor : NodeVar• «/»
}
Transitions:


S119{
	AritExpr : AritExpr + AritExpr• «stmtEnd»
	AritExpr : AritExpr + AritExpr• «+»
	AritExpr : AritExpr + AritExpr• «-»
	AritExpr : AritExpr •+ AritExpr «stmtEnd»
	AritExpr : AritExpr •- AritExpr «stmtEnd»
	AritExpr : AritExpr •+ AritExpr «+»
	AritExpr : AritExpr •- AritExpr «+»
	AritExpr : AritExpr •+ AritExpr «-»
	AritExpr : AritExpr •- AritExpr «-»
}
Transitions:
	+ -> 98
	- -> 99


S120{
	AritExpr : AritExpr - AritExpr• «stmtEnd»
	AritExpr : AritExpr - AritExpr• «+»
	AritExpr : AritExpr - AritExpr• «-»
	AritExpr : AritExpr •+ AritExpr «stmtEnd»
	AritExpr : AritExpr •- AritExpr «stmtEnd»
	AritExpr : AritExpr •+ AritExpr «+»
	AritExpr : AritExpr •- AritExpr «+»
	AritExpr : AritExpr •+ AritExpr «-»
	AritExpr : AritExpr •- AritExpr «-»
}
Transitions:
	+ -> 98
	- -> 99


S121{
	Term : Term * Factor• «stmtEnd»
	Term : Term * Factor• «+»
	Term : Term * Factor• «-»
	Term : Term * Factor• «*»
	Term : Term * Factor• «/»
}
Transitions:


S122{
	Term : Term / Factor• «stmtEnd»
	Term : Term / Factor• «+»
	Term : Term / Factor• «-»
	Term : Term / Factor• «*»
	Term : Term / Factor• «/»
}
Transitions:


S123{
	NodeVar : out . varId• «compOp»
}
Transitions:


S124{
	NodeVar : in . varId• «compOp»
}
Transitions:


S125{
	NodeVar : out •. varId «logicOp»
	NodeVar : out •. varId «)»
}
Transitions:
	. -> 136


S126{
	NodeVar : varId• «logicOp»
	NodeVar : varId• «)»
}
Transitions:


S127{
	NodeVar : in •. varId «logicOp»
	NodeVar : in •. varId «)»
}
Transitions:
	. -> 137


S128{
	LogicalExpr : NodeVar compOp NodeVar• «logicOp»
	LogicalExpr : NodeVar compOp NodeVar• «)»
}
Transitions:


S129{
	IfStmt : if ( Condition ) { •StmtLst } «bool»
	IfStmt : if ( Condition ) { •StmtLst } «if»
	IfStmt : if ( Condition ) { •StmtLst } «in»
	IfStmt : if ( Condition ) { •StmtLst } «int»
	IfStmt : if ( Condition ) { •StmtLst } «out»
	IfStmt : if ( Condition ) { •StmtLst } «string»
	IfStmt : if ( Condition ) { •StmtLst } «varId»
	IfStmt : if ( Condition ) { •StmtLst } «while»
	IfStmt : if ( Condition ) { •StmtLst } «}»
	StmtLst : •Stmt StmtLst «}»
	StmtLst : •Stmt «}»
	Stmt : •DeclarationStmt «bool»
	Stmt : •DeclarationStmt «if»
	Stmt : •DeclarationStmt «in»
	Stmt : •DeclarationStmt «int»
	Stmt : •DeclarationStmt «out»
	Stmt : •DeclarationStmt «string»
	Stmt : •DeclarationStmt «varId»
	Stmt : •DeclarationStmt «while»
	Stmt : •AssignStmt «bool»
	Stmt : •AssignStmt «if»
	Stmt : •AssignStmt «in»
	Stmt : •AssignStmt «int»
	Stmt : •AssignStmt «out»
	Stmt : •AssignStmt «string»
	Stmt : •AssignStmt «varId»
	Stmt : •AssignStmt «while»
	Stmt : •ControlStmt «bool»
	Stmt : •ControlStmt «if»
	Stmt : •ControlStmt «in»
	Stmt : •ControlStmt «int»
	Stmt : •ControlStmt «out»
	Stmt : •ControlStmt «string»
	Stmt : •ControlStmt «varId»
	Stmt : •ControlStmt «while»
	Stmt : •DeclarationStmt «}»
	Stmt : •AssignStmt «}»
	Stmt : •ControlStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «if»
	DeclarationStmt : •Type varId Assignment stmtEnd «if»
	DeclarationStmt : •Type varId stmtEnd «in»
	DeclarationStmt : •Type varId Assignment stmtEnd «in»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «out»
	DeclarationStmt : •Type varId Assignment stmtEnd «out»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «varId»
	DeclarationStmt : •Type varId Assignment stmtEnd «varId»
	DeclarationStmt : •Type varId stmtEnd «while»
	DeclarationStmt : •Type varId Assignment stmtEnd «while»
	AssignStmt : •NodeVar Assignment stmtEnd «bool»
	AssignStmt : •NodeVar Assignment stmtEnd «if»
	AssignStmt : •NodeVar Assignment stmtEnd «in»
	AssignStmt : •NodeVar Assignment stmtEnd «int»
	AssignStmt : •NodeVar Assignment stmtEnd «out»
	AssignStmt : •NodeVar Assignment stmtEnd «string»
	AssignStmt : •NodeVar Assignment stmtEnd «varId»
	AssignStmt : •NodeVar Assignment stmtEnd «while»
	ControlStmt : •IfStmt «bool»
	ControlStmt : •WhileStmt «bool»
	ControlStmt : •IfStmt «if»
	ControlStmt : •WhileStmt «if»
	ControlStmt : •IfStmt «in»
	ControlStmt : •WhileStmt «in»
	ControlStmt : •IfStmt «int»
	ControlStmt : •WhileStmt «int»
	ControlStmt : •IfStmt «out»
	ControlStmt : •WhileStmt «out»
	ControlStmt : •IfStmt «string»
	ControlStmt : •WhileStmt «string»
	ControlStmt : •IfStmt «varId»
	ControlStmt : •WhileStmt «varId»
	ControlStmt : •IfStmt «while»
	ControlStmt : •WhileStmt «while»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	AssignStmt : •NodeVar Assignment stmtEnd «}»
	ControlStmt : •IfStmt «}»
	ControlStmt : •WhileStmt «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
	NodeVar : •in . varId «assignOp»
	NodeVar : •out . varId «assignOp»
	NodeVar : •varId «assignOp»
	IfStmt : •if ( Condition ) { StmtLst } «bool»
	WhileStmt : •while ( Condition ) { StmtLst } «bool»
	IfStmt : •if ( Condition ) { StmtLst } «if»
	WhileStmt : •while ( Condition ) { StmtLst } «if»
	IfStmt : •if ( Condition ) { StmtLst } «in»
	WhileStmt : •while ( Condition ) { StmtLst } «in»
	IfStmt : •if ( Condition ) { StmtLst } «int»
	WhileStmt : •while ( Condition ) { StmtLst } «int»
	IfStmt : •if ( Condition ) { StmtLst } «out»
	WhileStmt : •while ( Condition ) { StmtLst } «out»
	IfStmt : •if ( Condition ) { StmtLst } «string»
	WhileStmt : •while ( Condition ) { StmtLst } «string»
	IfStmt : •if ( Condition ) { StmtLst } «varId»
	WhileStmt : •while ( Condition ) { StmtLst } «varId»
	IfStmt : •if ( Condition ) { StmtLst } «while»
	WhileStmt : •while ( Condition ) { StmtLst } «while»
	IfStmt : •if ( Condition ) { StmtLst } «}»
	WhileStmt : •while ( Condition ) { StmtLst } «}»
}
Transitions:
	int -> 32
	bool -> 33
	string -> 34
	out -> 46
	varId -> 47
	in -> 48
	Type -> 49
	NodeVar -> 50
	DeclarationStmt -> 52
	AssignStmt -> 53
	ControlStmt -> 54
	IfStmt -> 55
	WhileStmt -> 56
	if -> 57
	while -> 58
	Stmt -> 59
	StmtLst -> 138


S130{
	Condition : LogicalExpr logicOp Condition• «)»
}
Transitions:


S131{
	WhileStmt : while ( Condition ) { •StmtLst } «bool»
	WhileStmt : while ( Condition ) { •StmtLst } «if»
	WhileStmt : while ( Condition ) { •StmtLst } «in»
	WhileStmt : while ( Condition ) { •StmtLst } «int»
	WhileStmt : while ( Condition ) { •StmtLst } «out»
	WhileStmt : while ( Condition ) { •StmtLst } «string»
	WhileStmt : while ( Condition ) { •StmtLst } «varId»
	WhileStmt : while ( Condition ) { •StmtLst } «while»
	WhileStmt : while ( Condition ) { •StmtLst } «}»
	StmtLst : •Stmt StmtLst «}»
	StmtLst : •Stmt «}»
	Stmt : •DeclarationStmt «bool»
	Stmt : •DeclarationStmt «if»
	Stmt : •DeclarationStmt «in»
	Stmt : •DeclarationStmt «int»
	Stmt : •DeclarationStmt «out»
	Stmt : •DeclarationStmt «string»
	Stmt : •DeclarationStmt «varId»
	Stmt : •DeclarationStmt «while»
	Stmt : •AssignStmt «bool»
	Stmt : •AssignStmt «if»
	Stmt : •AssignStmt «in»
	Stmt : •AssignStmt «int»
	Stmt : •AssignStmt «out»
	Stmt : •AssignStmt «string»
	Stmt : •AssignStmt «varId»
	Stmt : •AssignStmt «while»
	Stmt : •ControlStmt «bool»
	Stmt : •ControlStmt «if»
	Stmt : •ControlStmt «in»
	Stmt : •ControlStmt «int»
	Stmt : •ControlStmt «out»
	Stmt : •ControlStmt «string»
	Stmt : •ControlStmt «varId»
	Stmt : •ControlStmt «while»
	Stmt : •DeclarationStmt «}»
	Stmt : •AssignStmt «}»
	Stmt : •ControlStmt «}»
	DeclarationStmt : •Type varId stmtEnd «bool»
	DeclarationStmt : •Type varId Assignment stmtEnd «bool»
	DeclarationStmt : •Type varId stmtEnd «if»
	DeclarationStmt : •Type varId Assignment stmtEnd «if»
	DeclarationStmt : •Type varId stmtEnd «in»
	DeclarationStmt : •Type varId Assignment stmtEnd «in»
	DeclarationStmt : •Type varId stmtEnd «int»
	DeclarationStmt : •Type varId Assignment stmtEnd «int»
	DeclarationStmt : •Type varId stmtEnd «out»
	DeclarationStmt : •Type varId Assignment stmtEnd «out»
	DeclarationStmt : •Type varId stmtEnd «string»
	DeclarationStmt : •Type varId Assignment stmtEnd «string»
	DeclarationStmt : •Type varId stmtEnd «varId»
	DeclarationStmt : •Type varId Assignment stmtEnd «varId»
	DeclarationStmt : •Type varId stmtEnd «while»
	DeclarationStmt : •Type varId Assignment stmtEnd «while»
	AssignStmt : •NodeVar Assignment stmtEnd «bool»
	AssignStmt : •NodeVar Assignment stmtEnd «if»
	AssignStmt : •NodeVar Assignment stmtEnd «in»
	AssignStmt : •NodeVar Assignment stmtEnd «int»
	AssignStmt : •NodeVar Assignment stmtEnd «out»
	AssignStmt : •NodeVar Assignment stmtEnd «string»
	AssignStmt : •NodeVar Assignment stmtEnd «varId»
	AssignStmt : •NodeVar Assignment stmtEnd «while»
	ControlStmt : •IfStmt «bool»
	ControlStmt : •WhileStmt «bool»
	ControlStmt : •IfStmt «if»
	ControlStmt : •WhileStmt «if»
	ControlStmt : •IfStmt «in»
	ControlStmt : •WhileStmt «in»
	ControlStmt : •IfStmt «int»
	ControlStmt : •WhileStmt «int»
	ControlStmt : •IfStmt «out»
	ControlStmt : •WhileStmt «out»
	ControlStmt : •IfStmt «string»
	ControlStmt : •WhileStmt «string»
	ControlStmt : •IfStmt «varId»
	ControlStmt : •WhileStmt «varId»
	ControlStmt : •IfStmt «while»
	ControlStmt : •WhileStmt «while»
	DeclarationStmt : •Type varId stmtEnd «}»
	DeclarationStmt : •Type varId Assignment stmtEnd «}»
	AssignStmt : •NodeVar Assignment stmtEnd «}»
	ControlStmt : •IfStmt «}»
	ControlStmt : •WhileStmt «}»
	Type : •int «varId»
	Type : •bool «varId»
	Type : •string «varId»
	NodeVar : •in . varId «assignOp»
	NodeVar : •out . varId «assignOp»
	NodeVar : •varId «assignOp»
	IfStmt : •if ( Condition ) { StmtLst } «bool»
	WhileStmt : •while ( Condition ) { StmtLst } «bool»
	IfStmt : •if ( Condition ) { StmtLst } «if»
	WhileStmt : •while ( Condition ) { StmtLst } «if»
	IfStmt : •if ( Condition ) { StmtLst } «in»
	WhileStmt : •while ( Condition ) { StmtLst } «in»
	IfStmt : •if ( Condition ) { StmtLst } «int»
	WhileStmt : •while ( Condition ) { StmtLst } «int»
	IfStmt : •if ( Condition ) { StmtLst } «out»
	WhileStmt : •while ( Condition ) { StmtLst } «out»
	IfStmt : •if ( Condition ) { StmtLst } «string»
	WhileStmt : •while ( Condition ) { StmtLst } «string»
	IfStmt : •if ( Condition ) { StmtLst } «varId»
	WhileStmt : •while ( Condition ) { StmtLst } «varId»
	IfStmt : •if ( Condition ) { StmtLst } «while»
	WhileStmt : •while ( Condition ) { StmtLst } «while»
	IfStmt : •if ( Condition ) { StmtLst } «}»
	WhileStmt : •while ( Condition ) { StmtLst } «}»
}
Transitions:
	int -> 32
	bool -> 33
	string -> 34
	out -> 46
	varId -> 47
	in -> 48
	Type -> 49
	NodeVar -> 50
	DeclarationStmt -> 52
	AssignStmt -> 53
	ControlStmt -> 54
	IfStmt -> 55
	WhileStmt -> 56
	if -> 57
	while -> 58
	Stmt -> 59
	StmtLst -> 139


S132{
	NodeVar : out . •varId «stmtEnd»
}
Transitions:
	varId -> 140


S133{
	NodeVar : in . •varId «stmtEnd»
}
Transitions:
	varId -> 141


S134{
	NodeVar : out . •varId «stmtEnd»
	NodeVar : out . •varId «+»
	NodeVar : out . •varId «-»
	NodeVar : out . •varId «*»
	NodeVar : out . •varId «/»
}
Transitions:
	varId -> 142


S135{
	NodeVar : in . •varId «stmtEnd»
	NodeVar : in . •varId «+»
	NodeVar : in . •varId «-»
	NodeVar : in . •varId «*»
	NodeVar : in . •varId «/»
}
Transitions:
	varId -> 143


S136{
	NodeVar : out . •varId «logicOp»
	NodeVar : out . •varId «)»
}
Transitions:
	varId -> 144


S137{
	NodeVar : in . •varId «logicOp»
	NodeVar : in . •varId «)»
}
Transitions:
	varId -> 145


S138{
	IfStmt : if ( Condition ) { StmtLst •} «bool»
	IfStmt : if ( Condition ) { StmtLst •} «if»
	IfStmt : if ( Condition ) { StmtLst •} «in»
	IfStmt : if ( Condition ) { StmtLst •} «int»
	IfStmt : if ( Condition ) { StmtLst •} «out»
	IfStmt : if ( Condition ) { StmtLst •} «string»
	IfStmt : if ( Condition ) { StmtLst •} «varId»
	IfStmt : if ( Condition ) { StmtLst •} «while»
	IfStmt : if ( Condition ) { StmtLst •} «}»
}
Transitions:
	} -> 146


S139{
	WhileStmt : while ( Condition ) { StmtLst •} «bool»
	WhileStmt : while ( Condition ) { StmtLst •} «if»
	WhileStmt : while ( Condition ) { StmtLst •} «in»
	WhileStmt : while ( Condition ) { StmtLst •} «int»
	WhileStmt : while ( Condition ) { StmtLst •} «out»
	WhileStmt : while ( Condition ) { StmtLst •} «string»
	WhileStmt : while ( Condition ) { StmtLst •} «varId»
	WhileStmt : while ( Condition ) { StmtLst •} «while»
	WhileStmt : while ( Condition ) { StmtLst •} «}»
}
Transitions:
	} -> 147


S140{
	NodeVar : out . varId• «stmtEnd»
}
Transitions:


S141{
	NodeVar : in . varId• «stmtEnd»
}
Transitions:


S142{
	NodeVar : out . varId• «stmtEnd»
	NodeVar : out . varId• «+»
	NodeVar : out . varId• «-»
	NodeVar : out . varId• «*»
	NodeVar : out . varId• «/»
}
Transitions:


S143{
	NodeVar : in . varId• «stmtEnd»
	NodeVar : in . varId• «+»
	NodeVar : in . varId• «-»
	NodeVar : in . varId• «*»
	NodeVar : in . varId• «/»
}
Transitions:


S144{
	NodeVar : out . varId• «logicOp»
	NodeVar : out . varId• «)»
}
Transitions:


S145{
	NodeVar : in . varId• «logicOp»
	NodeVar : in . varId• «)»
}
Transitions:


S146{
	IfStmt : if ( Condition ) { StmtLst }• «bool»
	IfStmt : if ( Condition ) { StmtLst }• «if»
	IfStmt : if ( Condition ) { StmtLst }• «in»
	IfStmt : if ( Condition ) { StmtLst }• «int»
	IfStmt : if ( Condition ) { StmtLst }• «out»
	IfStmt : if ( Condition ) { StmtLst }• «string»
	IfStmt : if ( Condition ) { StmtLst }• «varId»
	IfStmt : if ( Condition ) { StmtLst }• «while»
	IfStmt : if ( Condition ) { StmtLst }• «}»
}
Transitions:


S147{
	WhileStmt : while ( Condition ) { StmtLst }• «bool»
	WhileStmt : while ( Condition ) { StmtLst }• «if»
	WhileStmt : while ( Condition ) { StmtLst }• «in»
	WhileStmt : while ( Condition ) { StmtLst }• «int»
	WhileStmt : while ( Condition ) { StmtLst }• «out»
	WhileStmt : while ( Condition ) { StmtLst }• «string»
	WhileStmt : while ( Condition ) { StmtLst }• «varId»
	WhileStmt : while ( Condition ) { StmtLst }• «while»
	WhileStmt : while ( Condition ) { StmtLst }• «}»
}
Transitions:


