<<
import (
    "github.com/Ygg-Drasill/Sleipnir/pkg/gocc/util"
    "github.com/Ygg-Drasill/Sleipnir/pkg/gocc/token"
    "github.com/Ygg-Drasill/Sleipnir/pkg/ast"
)
>>

/* Production rules */

/* Outer file scope */
ProgramDeclarationList
    : NodeLst ConnLst   << ast.NewProgram($0, $1) >>
    ;

Node
    : node nodeId lcurly NodeIn NodeOut NodeProc rcurly     << ast.NewNode($Context, $1, $3, $4, $5, false) >>
    | template nodeId lcurly NodeIn NodeOut NodeProc rcurly << ast.NewNode($Context, $1, $3, $4, $5, true) >>
    | node nodeId colon nodeId stmtEnd                      << ast.UseTemplate($1, $3) >>
    ;

Conn
    : ConnOut "->" ConnIn stmtEnd       << ast.NewConnection($0, $2) >>
    ;

ConnOut
    : nodeId period out period varId          << ast.NewJunction($0, $4) >>
    ;

ConnIn
    : nodeId period in period varId           << ast.NewJunction($0, $4) >>
    ;

NodeLst
    : Node          << ast.NewNodeList($0) >>
    | NodeLst Node  << ast.AppendNode($0, $1) >>
    ;

ConnLst
    : Conn ConnLst  << ast.AppendConnection($1, $0) >>
    | empty          << ast.NewConnectionList() >>
    ;

/* Node scope */
Type : int | bool ;

NodeVar
    : in period varId     << ast.NewNodeVar($0, $2) >>
    | out period varId    << ast.NewNodeVar($0, $2) >>
    ;

NodeIn
    : in lcurly DeclarationList rcurly << ast.NewScopeIn($Context, $2) >>
    | empty
    ;

NodeOut
    : out lcurly DeclarationList rcurly << ast.NewScopeOut($Context, $2) >>
    | empty
    ;

NodeProc
    : process Block << ast.NewScopeProc($Context, $1) >>
    | process lcurly rcurly         << ast.NewScopeProc($Context, nil) >>
    | empty
    ;

/* Statement productions */
Identifier
    : NodeVar   << $0, nil >>
    | varId     << ast.NewLocalVar($0) >>
    ;

CompareOperator
    : eq | lt | gt | neq | and | or ;

DeclarationStmt
    : Type varId stmtEnd                << ast.NewDeclaration($Context, $0, $1, nil) >>
    | Type varId Assignment stmtEnd     << ast.NewDeclaration($Context, $0, $1, $2) >>
    ;

DeclarationList
    : DeclarationStmt DeclarationList    << ast.AppendDeclaration($1, $0) >>
    | empty                              << ast.NewDeclarationList() >>
    ;

Assignment
    : assign Expr   << $1, nil >>
    ;

AssignStmt
    : Identifier Assignment stmtEnd << ast.NewAssignmentStatement($0, $1) >>
    ;

ControlStmt
    : IfStmt        << $0, nil >>
    ;

IfStmt
    : if lp Expr rp Block else Block << ast.NewIfStatement($2, $4, $6) >>
    | if lp Expr rp Block            << ast.NewIfStatement($2, $4, nil) >>
    ;

Stmt
    : DeclarationStmt   << $0, nil >>
    | AssignStmt        << $0, nil >>
    | ControlStmt       << $0, nil >>
    | exit stmtEnd      << $0, nil >>
    ;

StmtLst
    : StmtLst Stmt  << ast.AppendStatement($0, $1) >>
    | Stmt          << ast.NewStatementList($0) >>
    ;

Block
    : lcurly StmtLst rcurly << $1, nil >>
    | empty
    ;

/* Expressions */
Expr
    : Expr plus Term                << ast.NewExpression($0, $1, $2) >>
    | Expr minus Term               << ast.NewExpression($0, $1, $2) >>
    | Expr modulo Term              << ast.NewExpression($0, $1, $2) >>
    | Term                          << $0, nil >>
    | Expr CompareOperator Factor   << ast.NewExpression($0, $1, $2) >>
    ;

Term
    : Term mul Factor       << ast.NewExpression($0, $1, $2) >>
    | Term div Factor       << ast.NewExpression($0, $1, $2) >>
    | Factor                << $0, nil >>
    ;

Factor
    : lp Expr rp        << $1, nil >>
    | Identifier            << $0, nil >>
    | not Factor            << $1, nil >>
    | int64 	            << util.IntValue($0.(*token.Token).Lit) >>
    ;