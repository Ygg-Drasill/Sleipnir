// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			shift(4), // node
			nil,      // nodeId
			nil,      // lcurly
			nil,      // rcurly
			shift(5), // template
			nil,      // colon
			nil,      // stmtEnd
			nil,      // ->
			nil,      // period
			nil,      // out
			nil,      // varId
			nil,      // in
			nil,      // empty
			nil,      // int
			nil,      // bool
			nil,      // process
			nil,      // eq
			nil,      // lt
			nil,      // gt
			nil,      // neq
			nil,      // and
			nil,      // or
			nil,      // assign
			nil,      // if
			nil,      // lp
			nil,      // rp
			nil,      // else
			nil,      // exit
			nil,      // plus
			nil,      // minus
			nil,      // modulo
			nil,      // mul
			nil,      // div
			nil,      // not
			nil,      // int64
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // ␚
			nil,          // node
			nil,          // nodeId
			nil,          // lcurly
			nil,          // rcurly
			nil,          // template
			nil,          // colon
			nil,          // stmtEnd
			nil,          // ->
			nil,          // period
			nil,          // out
			nil,          // varId
			nil,          // in
			nil,          // empty
			nil,          // int
			nil,          // bool
			nil,          // process
			nil,          // eq
			nil,          // lt
			nil,          // gt
			nil,          // neq
			nil,          // and
			nil,          // or
			nil,          // assign
			nil,          // if
			nil,          // lp
			nil,          // rp
			nil,          // else
			nil,          // exit
			nil,          // plus
			nil,          // minus
			nil,          // modulo
			nil,          // mul
			nil,          // div
			nil,          // not
			nil,          // int64
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(11), // ␚, reduce: ConnLst
			shift(4),   // node
			shift(8),   // nodeId
			nil,        // lcurly
			nil,        // rcurly
			shift(5),   // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(8), // ␚, reduce: NodeLst
			reduce(8), // node, reduce: NodeLst
			reduce(8), // nodeId, reduce: NodeLst
			nil,       // lcurly
			nil,       // rcurly
			reduce(8), // template, reduce: NodeLst
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			shift(11), // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			shift(12), // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // ␚, reduce: ProgramDeclarationList
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(9), // ␚, reduce: NodeLst
			reduce(9), // node, reduce: NodeLst
			reduce(9), // nodeId, reduce: NodeLst
			nil,       // lcurly
			nil,       // rcurly
			reduce(9), // template, reduce: NodeLst
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			shift(13), // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(11), // ␚, reduce: ConnLst
			nil,        // node
			shift(8),   // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			shift(15), // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(16), // lcurly
			nil,       // rcurly
			nil,       // template
			shift(17), // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(18), // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(19), // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(10), // ␚, reduce: ConnLst
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			shift(20), // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(17), // rcurly, reduce: NodeIn
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(17), // out, reduce: NodeIn
			nil,        // varId
			shift(23),  // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			reduce(17), // process, reduce: NodeIn
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			shift(24), // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(17), // rcurly, reduce: NodeIn
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(17), // out, reduce: NodeIn
			nil,        // varId
			shift(23),  // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			reduce(17), // process, reduce: NodeIn
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			shift(26), // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			shift(27), // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(28), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(19), // rcurly, reduce: NodeOut
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(30),  // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			reduce(19), // process, reduce: NodeOut
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(31), // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(32), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(19), // rcurly, reduce: NodeOut
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(30),  // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			reduce(19), // process, reduce: NodeOut
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			shift(34), // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			shift(35), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(5), // ␚, reduce: Conn
			nil,       // node
			reduce(5), // nodeId, reduce: Conn
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(22), // rcurly, reduce: NodeProc
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			shift(37),  // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			shift(38), // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(34), // rcurly, reduce: DeclarationList
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			shift(40),  // int
			shift(41),  // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // ␚, reduce: Node
			reduce(4), // node, reduce: Node
			reduce(4), // nodeId, reduce: Node
			nil,       // lcurly
			nil,       // rcurly
			reduce(4), // template, reduce: Node
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(22), // rcurly, reduce: NodeProc
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			shift(37),  // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			reduce(6), // ->, reduce: ConnOut
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			shift(45), // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			shift(46), // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			shift(47),  // lcurly
			reduce(47), // rcurly, reduce: Block
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(34), // rcurly, reduce: DeclarationList
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			shift(40),  // int
			shift(41),  // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			shift(50), // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			reduce(12), // varId, reduce: Type
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			reduce(13), // varId, reduce: Type
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			shift(51), // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(34), // rcurly, reduce: DeclarationList
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			shift(40),  // int
			shift(41),  // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			shift(53), // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			shift(54), // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // ␚, reduce: Node
			reduce(2), // node, reduce: Node
			reduce(2), // nodeId, reduce: Node
			nil,       // lcurly
			nil,       // rcurly
			reduce(2), // template, reduce: Node
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			shift(55), // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(56), // out
			shift(57), // varId
			shift(58), // in
			nil,       // empty
			shift(40), // int
			shift(41), // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			shift(66), // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			shift(68), // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(20), // rcurly, reduce: NodeProc
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			shift(70), // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(71), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			shift(73), // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(16), // rcurly, reduce: NodeIn
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(16), // out, reduce: NodeIn
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			reduce(16), // process, reduce: NodeIn
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(33), // rcurly, reduce: DeclarationList
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // ␚, reduce: Node
			reduce(3), // node, reduce: Node
			reduce(3), // nodeId, reduce: Node
			nil,       // lcurly
			nil,       // rcurly
			reduce(3), // template, reduce: Node
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			reduce(7), // stmtEnd, reduce: ConnIn
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(21), // rcurly, reduce: NodeProc
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			shift(74), // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			reduce(24), // assign, reduce: Identifier
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			shift(75), // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			shift(76), // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			reduce(23), // assign, reduce: Identifier
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			shift(73), // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(40), // rcurly, reduce: Stmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(40), // out, reduce: Stmt
			reduce(40), // varId, reduce: Stmt
			reduce(40), // in, reduce: Stmt
			nil,        // empty
			reduce(40), // int, reduce: Stmt
			reduce(40), // bool, reduce: Stmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(40), // if, reduce: Stmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(40), // exit, reduce: Stmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(41), // rcurly, reduce: Stmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(41), // out, reduce: Stmt
			reduce(41), // varId, reduce: Stmt
			reduce(41), // in, reduce: Stmt
			nil,        // empty
			reduce(41), // int, reduce: Stmt
			reduce(41), // bool, reduce: Stmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(41), // if, reduce: Stmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(41), // exit, reduce: Stmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(42), // rcurly, reduce: Stmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(42), // out, reduce: Stmt
			reduce(42), // varId, reduce: Stmt
			reduce(42), // in, reduce: Stmt
			nil,        // empty
			reduce(42), // int, reduce: Stmt
			reduce(42), // bool, reduce: Stmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(42), // if, reduce: Stmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(42), // exit, reduce: Stmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(37), // rcurly, reduce: ControlStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(37), // out, reduce: ControlStmt
			reduce(37), // varId, reduce: ControlStmt
			reduce(37), // in, reduce: ControlStmt
			nil,        // empty
			reduce(37), // int, reduce: ControlStmt
			reduce(37), // bool, reduce: ControlStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(37), // if, reduce: ControlStmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(37), // exit, reduce: ControlStmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(78), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(45), // rcurly, reduce: StmtLst
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(45), // out, reduce: StmtLst
			reduce(45), // varId, reduce: StmtLst
			reduce(45), // in, reduce: StmtLst
			nil,        // empty
			reduce(45), // int, reduce: StmtLst
			reduce(45), // bool, reduce: StmtLst
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(45), // if, reduce: StmtLst
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(45), // exit, reduce: StmtLst
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(79), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			shift(80), // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(56), // out
			shift(57), // varId
			shift(58), // in
			nil,       // empty
			shift(40), // int
			shift(41), // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			shift(66), // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			shift(68), // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(18), // rcurly, reduce: NodeOut
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			reduce(18), // process, reduce: NodeOut
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(31), // rcurly, reduce: DeclarationStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			reduce(31), // int, reduce: DeclarationStmt
			reduce(31), // bool, reduce: DeclarationStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(82), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			shift(94), // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			shift(95), // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(96), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			shift(73), // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			shift(98), // stmtEnd
			nil,       // ->
			nil,       // period
			nil,       // out
			nil,       // varId
			nil,       // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(43), // rcurly, reduce: Stmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(43), // out, reduce: Stmt
			reduce(43), // varId, reduce: Stmt
			reduce(43), // in, reduce: Stmt
			nil,        // empty
			reduce(43), // int, reduce: Stmt
			reduce(43), // bool, reduce: Stmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(43), // if, reduce: Stmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(43), // exit, reduce: Stmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(46), // rcurly, reduce: Block
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(44), // rcurly, reduce: StmtLst
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(44), // out, reduce: StmtLst
			reduce(44), // varId, reduce: StmtLst
			reduce(44), // in, reduce: StmtLst
			nil,        // empty
			reduce(44), // int, reduce: StmtLst
			reduce(44), // bool, reduce: StmtLst
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(44), // if, reduce: StmtLst
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(44), // exit, reduce: StmtLst
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(32), // rcurly, reduce: DeclarationStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			reduce(32), // int, reduce: DeclarationStmt
			reduce(32), // bool, reduce: DeclarationStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(110), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(24), // stmtEnd, reduce: Identifier
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(24), // eq, reduce: Identifier
			reduce(24), // lt, reduce: Identifier
			reduce(24), // gt, reduce: Identifier
			reduce(24), // neq, reduce: Identifier
			reduce(24), // and, reduce: Identifier
			reduce(24), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(24), // plus, reduce: Identifier
			reduce(24), // minus, reduce: Identifier
			reduce(24), // modulo, reduce: Identifier
			reduce(24), // mul, reduce: Identifier
			reduce(24), // div, reduce: Identifier
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(111), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(23), // stmtEnd, reduce: Identifier
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(23), // eq, reduce: Identifier
			reduce(23), // lt, reduce: Identifier
			reduce(23), // gt, reduce: Identifier
			reduce(23), // neq, reduce: Identifier
			reduce(23), // and, reduce: Identifier
			reduce(23), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(23), // plus, reduce: Identifier
			reduce(23), // minus, reduce: Identifier
			reduce(23), // modulo, reduce: Identifier
			reduce(23), // mul, reduce: Identifier
			reduce(23), // div, reduce: Identifier
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(57), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(57), // eq, reduce: Factor
			reduce(57), // lt, reduce: Factor
			reduce(57), // gt, reduce: Factor
			reduce(57), // neq, reduce: Factor
			reduce(57), // and, reduce: Factor
			reduce(57), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(57), // plus, reduce: Factor
			reduce(57), // minus, reduce: Factor
			reduce(57), // modulo, reduce: Factor
			reduce(57), // mul, reduce: Factor
			reduce(57), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(35), // stmtEnd, reduce: Assignment
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			shift(113), // eq
			shift(114), // lt
			shift(115), // gt
			shift(116), // neq
			shift(117), // and
			shift(118), // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			shift(119), // plus
			shift(120), // minus
			shift(121), // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(51), // stmtEnd, reduce: Expr
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(51), // eq, reduce: Expr
			reduce(51), // lt, reduce: Expr
			reduce(51), // gt, reduce: Expr
			reduce(51), // neq, reduce: Expr
			reduce(51), // and, reduce: Expr
			reduce(51), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(51), // plus, reduce: Expr
			reduce(51), // minus, reduce: Expr
			reduce(51), // modulo, reduce: Expr
			shift(123), // mul
			shift(124), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(55), // stmtEnd, reduce: Term
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(55), // eq, reduce: Term
			reduce(55), // lt, reduce: Term
			reduce(55), // gt, reduce: Term
			reduce(55), // neq, reduce: Term
			reduce(55), // and, reduce: Term
			reduce(55), // or, reduce: Term
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(55), // plus, reduce: Term
			reduce(55), // minus, reduce: Term
			reduce(55), // modulo, reduce: Term
			reduce(55), // mul, reduce: Term
			reduce(55), // div, reduce: Term
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(59), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(59), // eq, reduce: Factor
			reduce(59), // lt, reduce: Factor
			reduce(59), // gt, reduce: Factor
			reduce(59), // neq, reduce: Factor
			reduce(59), // and, reduce: Factor
			reduce(59), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(59), // plus, reduce: Factor
			reduce(59), // minus, reduce: Factor
			reduce(59), // modulo, reduce: Factor
			reduce(59), // mul, reduce: Factor
			reduce(59), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			reduce(15), // assign, reduce: NodeVar
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			reduce(14), // assign, reduce: NodeVar
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(31), // rcurly, reduce: DeclarationStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(31), // out, reduce: DeclarationStmt
			reduce(31), // varId, reduce: DeclarationStmt
			reduce(31), // in, reduce: DeclarationStmt
			nil,        // empty
			reduce(31), // int, reduce: DeclarationStmt
			reduce(31), // bool, reduce: DeclarationStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(31), // if, reduce: DeclarationStmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(31), // exit, reduce: DeclarationStmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			shift(126), // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(36), // rcurly, reduce: AssignStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(36), // out, reduce: AssignStmt
			reduce(36), // varId, reduce: AssignStmt
			reduce(36), // in, reduce: AssignStmt
			nil,        // empty
			reduce(36), // int, reduce: AssignStmt
			reduce(36), // bool, reduce: AssignStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(36), // if, reduce: AssignStmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(36), // exit, reduce: AssignStmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(127), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(24), // eq, reduce: Identifier
			reduce(24), // lt, reduce: Identifier
			reduce(24), // gt, reduce: Identifier
			reduce(24), // neq, reduce: Identifier
			reduce(24), // and, reduce: Identifier
			reduce(24), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(24), // rp, reduce: Identifier
			nil,        // else
			nil,        // exit
			reduce(24), // plus, reduce: Identifier
			reduce(24), // minus, reduce: Identifier
			reduce(24), // modulo, reduce: Identifier
			reduce(24), // mul, reduce: Identifier
			reduce(24), // div, reduce: Identifier
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(128), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(23), // eq, reduce: Identifier
			reduce(23), // lt, reduce: Identifier
			reduce(23), // gt, reduce: Identifier
			reduce(23), // neq, reduce: Identifier
			reduce(23), // and, reduce: Identifier
			reduce(23), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(23), // rp, reduce: Identifier
			nil,        // else
			nil,        // exit
			reduce(23), // plus, reduce: Identifier
			reduce(23), // minus, reduce: Identifier
			reduce(23), // modulo, reduce: Identifier
			reduce(23), // mul, reduce: Identifier
			reduce(23), // div, reduce: Identifier
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(57), // eq, reduce: Factor
			reduce(57), // lt, reduce: Factor
			reduce(57), // gt, reduce: Factor
			reduce(57), // neq, reduce: Factor
			reduce(57), // and, reduce: Factor
			reduce(57), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(57), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(57), // plus, reduce: Factor
			reduce(57), // minus, reduce: Factor
			reduce(57), // modulo, reduce: Factor
			reduce(57), // mul, reduce: Factor
			reduce(57), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			shift(113), // eq
			shift(114), // lt
			shift(115), // gt
			shift(116), // neq
			shift(117), // and
			shift(118), // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			shift(130), // rp
			nil,        // else
			nil,        // exit
			shift(131), // plus
			shift(132), // minus
			shift(133), // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(51), // eq, reduce: Expr
			reduce(51), // lt, reduce: Expr
			reduce(51), // gt, reduce: Expr
			reduce(51), // neq, reduce: Expr
			reduce(51), // and, reduce: Expr
			reduce(51), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(51), // rp, reduce: Expr
			nil,        // else
			nil,        // exit
			reduce(51), // plus, reduce: Expr
			reduce(51), // minus, reduce: Expr
			reduce(51), // modulo, reduce: Expr
			shift(135), // mul
			shift(136), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(55), // eq, reduce: Term
			reduce(55), // lt, reduce: Term
			reduce(55), // gt, reduce: Term
			reduce(55), // neq, reduce: Term
			reduce(55), // and, reduce: Term
			reduce(55), // or, reduce: Term
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(55), // rp, reduce: Term
			nil,        // else
			nil,        // exit
			reduce(55), // plus, reduce: Term
			reduce(55), // minus, reduce: Term
			reduce(55), // modulo, reduce: Term
			reduce(55), // mul, reduce: Term
			reduce(55), // div, reduce: Term
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(59), // eq, reduce: Factor
			reduce(59), // lt, reduce: Factor
			reduce(59), // gt, reduce: Factor
			reduce(59), // neq, reduce: Factor
			reduce(59), // and, reduce: Factor
			reduce(59), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(59), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(59), // plus, reduce: Factor
			reduce(59), // minus, reduce: Factor
			reduce(59), // modulo, reduce: Factor
			reduce(59), // mul, reduce: Factor
			reduce(59), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(138), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(139), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(140), // out
			shift(141), // varId
			shift(142), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(145), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(147), // not
			shift(148), // int64
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(25), // out, reduce: CompareOperator
			reduce(25), // varId, reduce: CompareOperator
			reduce(25), // in, reduce: CompareOperator
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			reduce(25), // lp, reduce: CompareOperator
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			reduce(25), // not, reduce: CompareOperator
			reduce(25), // int64, reduce: CompareOperator
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(26), // out, reduce: CompareOperator
			reduce(26), // varId, reduce: CompareOperator
			reduce(26), // in, reduce: CompareOperator
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			reduce(26), // lp, reduce: CompareOperator
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			reduce(26), // not, reduce: CompareOperator
			reduce(26), // int64, reduce: CompareOperator
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(27), // out, reduce: CompareOperator
			reduce(27), // varId, reduce: CompareOperator
			reduce(27), // in, reduce: CompareOperator
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			reduce(27), // lp, reduce: CompareOperator
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			reduce(27), // not, reduce: CompareOperator
			reduce(27), // int64, reduce: CompareOperator
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(28), // out, reduce: CompareOperator
			reduce(28), // varId, reduce: CompareOperator
			reduce(28), // in, reduce: CompareOperator
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			reduce(28), // lp, reduce: CompareOperator
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			reduce(28), // not, reduce: CompareOperator
			reduce(28), // int64, reduce: CompareOperator
		},
	},
	actionRow{ // S117
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(29), // out, reduce: CompareOperator
			reduce(29), // varId, reduce: CompareOperator
			reduce(29), // in, reduce: CompareOperator
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			reduce(29), // lp, reduce: CompareOperator
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			reduce(29), // not, reduce: CompareOperator
			reduce(29), // int64, reduce: CompareOperator
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(30), // out, reduce: CompareOperator
			reduce(30), // varId, reduce: CompareOperator
			reduce(30), // in, reduce: CompareOperator
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			reduce(30), // lp, reduce: CompareOperator
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			reduce(30), // not, reduce: CompareOperator
			reduce(30), // int64, reduce: CompareOperator
		},
	},
	actionRow{ // S119
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			shift(113), // eq
			shift(114), // lt
			shift(115), // gt
			shift(116), // neq
			shift(117), // and
			shift(118), // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			shift(152), // rp
			nil,        // else
			nil,        // exit
			shift(131), // plus
			shift(132), // minus
			shift(133), // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(83), // out
			shift(84), // varId
			shift(85), // in
			nil,       // empty
			nil,       // int
			nil,       // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			nil,       // if
			shift(89), // lp
			nil,       // rp
			nil,       // else
			nil,       // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			shift(92), // not
			shift(93), // int64
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(58), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(58), // eq, reduce: Factor
			reduce(58), // lt, reduce: Factor
			reduce(58), // gt, reduce: Factor
			reduce(58), // neq, reduce: Factor
			reduce(58), // and, reduce: Factor
			reduce(58), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(58), // plus, reduce: Factor
			reduce(58), // minus, reduce: Factor
			reduce(58), // modulo, reduce: Factor
			reduce(58), // mul, reduce: Factor
			reduce(58), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(32), // rcurly, reduce: DeclarationStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(32), // out, reduce: DeclarationStmt
			reduce(32), // varId, reduce: DeclarationStmt
			reduce(32), // in, reduce: DeclarationStmt
			nil,        // empty
			reduce(32), // int, reduce: DeclarationStmt
			reduce(32), // bool, reduce: DeclarationStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(32), // if, reduce: DeclarationStmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(32), // exit, reduce: DeclarationStmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(155), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(156), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(157), // out
			shift(158), // varId
			shift(159), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(162), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(164), // not
			shift(165), // int64
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			shift(166), // lcurly
			reduce(47), // rcurly, reduce: Block
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(47), // out, reduce: Block
			reduce(47), // varId, reduce: Block
			reduce(47), // in, reduce: Block
			nil,        // empty
			reduce(47), // int, reduce: Block
			reduce(47), // bool, reduce: Block
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(47), // if, reduce: Block
			nil,        // lp
			nil,        // rp
			reduce(47), // else, reduce: Block
			reduce(47), // exit, reduce: Block
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			shift(113), // eq
			shift(114), // lt
			shift(115), // gt
			shift(116), // neq
			shift(117), // and
			shift(118), // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			shift(171), // rp
			nil,        // else
			nil,        // exit
			shift(131), // plus
			shift(132), // minus
			shift(133), // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(58), // eq, reduce: Factor
			reduce(58), // lt, reduce: Factor
			reduce(58), // gt, reduce: Factor
			reduce(58), // neq, reduce: Factor
			reduce(58), // and, reduce: Factor
			reduce(58), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(58), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(58), // plus, reduce: Factor
			reduce(58), // minus, reduce: Factor
			reduce(58), // modulo, reduce: Factor
			reduce(58), // mul, reduce: Factor
			reduce(58), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(15), // stmtEnd, reduce: NodeVar
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(15), // eq, reduce: NodeVar
			reduce(15), // lt, reduce: NodeVar
			reduce(15), // gt, reduce: NodeVar
			reduce(15), // neq, reduce: NodeVar
			reduce(15), // and, reduce: NodeVar
			reduce(15), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(15), // plus, reduce: NodeVar
			reduce(15), // minus, reduce: NodeVar
			reduce(15), // modulo, reduce: NodeVar
			reduce(15), // mul, reduce: NodeVar
			reduce(15), // div, reduce: NodeVar
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(14), // stmtEnd, reduce: NodeVar
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(14), // eq, reduce: NodeVar
			reduce(14), // lt, reduce: NodeVar
			reduce(14), // gt, reduce: NodeVar
			reduce(14), // neq, reduce: NodeVar
			reduce(14), // and, reduce: NodeVar
			reduce(14), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(14), // plus, reduce: NodeVar
			reduce(14), // minus, reduce: NodeVar
			reduce(14), // modulo, reduce: NodeVar
			reduce(14), // mul, reduce: NodeVar
			reduce(14), // div, reduce: NodeVar
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(174), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(24), // stmtEnd, reduce: Identifier
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(24), // eq, reduce: Identifier
			reduce(24), // lt, reduce: Identifier
			reduce(24), // gt, reduce: Identifier
			reduce(24), // neq, reduce: Identifier
			reduce(24), // and, reduce: Identifier
			reduce(24), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(24), // plus, reduce: Identifier
			reduce(24), // minus, reduce: Identifier
			reduce(24), // modulo, reduce: Identifier
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(175), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(23), // stmtEnd, reduce: Identifier
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(23), // eq, reduce: Identifier
			reduce(23), // lt, reduce: Identifier
			reduce(23), // gt, reduce: Identifier
			reduce(23), // neq, reduce: Identifier
			reduce(23), // and, reduce: Identifier
			reduce(23), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(23), // plus, reduce: Identifier
			reduce(23), // minus, reduce: Identifier
			reduce(23), // modulo, reduce: Identifier
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(57), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(57), // eq, reduce: Factor
			reduce(57), // lt, reduce: Factor
			reduce(57), // gt, reduce: Factor
			reduce(57), // neq, reduce: Factor
			reduce(57), // and, reduce: Factor
			reduce(57), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(57), // plus, reduce: Factor
			reduce(57), // minus, reduce: Factor
			reduce(57), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(52), // stmtEnd, reduce: Expr
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(52), // eq, reduce: Expr
			reduce(52), // lt, reduce: Expr
			reduce(52), // gt, reduce: Expr
			reduce(52), // neq, reduce: Expr
			reduce(52), // and, reduce: Expr
			reduce(52), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(52), // plus, reduce: Expr
			reduce(52), // minus, reduce: Expr
			reduce(52), // modulo, reduce: Expr
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(140), // out
			shift(141), // varId
			shift(142), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(145), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(147), // not
			shift(148), // int64
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(59), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(59), // eq, reduce: Factor
			reduce(59), // lt, reduce: Factor
			reduce(59), // gt, reduce: Factor
			reduce(59), // neq, reduce: Factor
			reduce(59), // and, reduce: Factor
			reduce(59), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(59), // plus, reduce: Factor
			reduce(59), // minus, reduce: Factor
			reduce(59), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(48), // stmtEnd, reduce: Expr
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(48), // eq, reduce: Expr
			reduce(48), // lt, reduce: Expr
			reduce(48), // gt, reduce: Expr
			reduce(48), // neq, reduce: Expr
			reduce(48), // and, reduce: Expr
			reduce(48), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(48), // plus, reduce: Expr
			reduce(48), // minus, reduce: Expr
			reduce(48), // modulo, reduce: Expr
			shift(123), // mul
			shift(124), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(49), // stmtEnd, reduce: Expr
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(49), // eq, reduce: Expr
			reduce(49), // lt, reduce: Expr
			reduce(49), // gt, reduce: Expr
			reduce(49), // neq, reduce: Expr
			reduce(49), // and, reduce: Expr
			reduce(49), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(49), // plus, reduce: Expr
			reduce(49), // minus, reduce: Expr
			reduce(49), // modulo, reduce: Expr
			shift(123), // mul
			shift(124), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(50), // stmtEnd, reduce: Expr
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(50), // eq, reduce: Expr
			reduce(50), // lt, reduce: Expr
			reduce(50), // gt, reduce: Expr
			reduce(50), // neq, reduce: Expr
			reduce(50), // and, reduce: Expr
			reduce(50), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(50), // plus, reduce: Expr
			reduce(50), // minus, reduce: Expr
			reduce(50), // modulo, reduce: Expr
			shift(123), // mul
			shift(124), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(56), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(56), // eq, reduce: Factor
			reduce(56), // lt, reduce: Factor
			reduce(56), // gt, reduce: Factor
			reduce(56), // neq, reduce: Factor
			reduce(56), // and, reduce: Factor
			reduce(56), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(56), // plus, reduce: Factor
			reduce(56), // minus, reduce: Factor
			reduce(56), // modulo, reduce: Factor
			reduce(56), // mul, reduce: Factor
			reduce(56), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(53), // stmtEnd, reduce: Term
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(53), // eq, reduce: Term
			reduce(53), // lt, reduce: Term
			reduce(53), // gt, reduce: Term
			reduce(53), // neq, reduce: Term
			reduce(53), // and, reduce: Term
			reduce(53), // or, reduce: Term
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(53), // plus, reduce: Term
			reduce(53), // minus, reduce: Term
			reduce(53), // modulo, reduce: Term
			reduce(53), // mul, reduce: Term
			reduce(53), // div, reduce: Term
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(54), // stmtEnd, reduce: Term
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(54), // eq, reduce: Term
			reduce(54), // lt, reduce: Term
			reduce(54), // gt, reduce: Term
			reduce(54), // neq, reduce: Term
			reduce(54), // and, reduce: Term
			reduce(54), // or, reduce: Term
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(54), // plus, reduce: Term
			reduce(54), // minus, reduce: Term
			reduce(54), // modulo, reduce: Term
			reduce(54), // mul, reduce: Term
			reduce(54), // div, reduce: Term
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(15), // eq, reduce: NodeVar
			reduce(15), // lt, reduce: NodeVar
			reduce(15), // gt, reduce: NodeVar
			reduce(15), // neq, reduce: NodeVar
			reduce(15), // and, reduce: NodeVar
			reduce(15), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(15), // rp, reduce: NodeVar
			nil,        // else
			nil,        // exit
			reduce(15), // plus, reduce: NodeVar
			reduce(15), // minus, reduce: NodeVar
			reduce(15), // modulo, reduce: NodeVar
			reduce(15), // mul, reduce: NodeVar
			reduce(15), // div, reduce: NodeVar
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S156
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(14), // eq, reduce: NodeVar
			reduce(14), // lt, reduce: NodeVar
			reduce(14), // gt, reduce: NodeVar
			reduce(14), // neq, reduce: NodeVar
			reduce(14), // and, reduce: NodeVar
			reduce(14), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(14), // rp, reduce: NodeVar
			nil,        // else
			nil,        // exit
			reduce(14), // plus, reduce: NodeVar
			reduce(14), // minus, reduce: NodeVar
			reduce(14), // modulo, reduce: NodeVar
			reduce(14), // mul, reduce: NodeVar
			reduce(14), // div, reduce: NodeVar
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(178), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(24), // eq, reduce: Identifier
			reduce(24), // lt, reduce: Identifier
			reduce(24), // gt, reduce: Identifier
			reduce(24), // neq, reduce: Identifier
			reduce(24), // and, reduce: Identifier
			reduce(24), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(24), // rp, reduce: Identifier
			nil,        // else
			nil,        // exit
			reduce(24), // plus, reduce: Identifier
			reduce(24), // minus, reduce: Identifier
			reduce(24), // modulo, reduce: Identifier
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S159
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			shift(179), // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S160
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(23), // eq, reduce: Identifier
			reduce(23), // lt, reduce: Identifier
			reduce(23), // gt, reduce: Identifier
			reduce(23), // neq, reduce: Identifier
			reduce(23), // and, reduce: Identifier
			reduce(23), // or, reduce: Identifier
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(23), // rp, reduce: Identifier
			nil,        // else
			nil,        // exit
			reduce(23), // plus, reduce: Identifier
			reduce(23), // minus, reduce: Identifier
			reduce(23), // modulo, reduce: Identifier
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S161
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(57), // eq, reduce: Factor
			reduce(57), // lt, reduce: Factor
			reduce(57), // gt, reduce: Factor
			reduce(57), // neq, reduce: Factor
			reduce(57), // and, reduce: Factor
			reduce(57), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(57), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(57), // plus, reduce: Factor
			reduce(57), // minus, reduce: Factor
			reduce(57), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S162
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(99),  // out
			shift(100), // varId
			shift(101), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(105), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(108), // not
			shift(109), // int64
		},
	},
	actionRow{ // S163
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(52), // eq, reduce: Expr
			reduce(52), // lt, reduce: Expr
			reduce(52), // gt, reduce: Expr
			reduce(52), // neq, reduce: Expr
			reduce(52), // and, reduce: Expr
			reduce(52), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(52), // rp, reduce: Expr
			nil,        // else
			nil,        // exit
			reduce(52), // plus, reduce: Expr
			reduce(52), // minus, reduce: Expr
			reduce(52), // modulo, reduce: Expr
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(157), // out
			shift(158), // varId
			shift(159), // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			shift(162), // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			shift(164), // not
			shift(165), // int64
		},
	},
	actionRow{ // S165
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(59), // eq, reduce: Factor
			reduce(59), // lt, reduce: Factor
			reduce(59), // gt, reduce: Factor
			reduce(59), // neq, reduce: Factor
			reduce(59), // and, reduce: Factor
			reduce(59), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(59), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(59), // plus, reduce: Factor
			reduce(59), // minus, reduce: Factor
			reduce(59), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S166
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(56), // out
			shift(57), // varId
			shift(58), // in
			nil,       // empty
			shift(40), // int
			shift(41), // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			shift(66), // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			shift(68), // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(39), // rcurly, reduce: IfStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(39), // out, reduce: IfStmt
			reduce(39), // varId, reduce: IfStmt
			reduce(39), // in, reduce: IfStmt
			nil,        // empty
			reduce(39), // int, reduce: IfStmt
			reduce(39), // bool, reduce: IfStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(39), // if, reduce: IfStmt
			nil,        // lp
			nil,        // rp
			shift(183), // else
			reduce(39), // exit, reduce: IfStmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(48), // eq, reduce: Expr
			reduce(48), // lt, reduce: Expr
			reduce(48), // gt, reduce: Expr
			reduce(48), // neq, reduce: Expr
			reduce(48), // and, reduce: Expr
			reduce(48), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(48), // rp, reduce: Expr
			nil,        // else
			nil,        // exit
			reduce(48), // plus, reduce: Expr
			reduce(48), // minus, reduce: Expr
			reduce(48), // modulo, reduce: Expr
			shift(135), // mul
			shift(136), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S169
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(49), // eq, reduce: Expr
			reduce(49), // lt, reduce: Expr
			reduce(49), // gt, reduce: Expr
			reduce(49), // neq, reduce: Expr
			reduce(49), // and, reduce: Expr
			reduce(49), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(49), // rp, reduce: Expr
			nil,        // else
			nil,        // exit
			reduce(49), // plus, reduce: Expr
			reduce(49), // minus, reduce: Expr
			reduce(49), // modulo, reduce: Expr
			shift(135), // mul
			shift(136), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(50), // eq, reduce: Expr
			reduce(50), // lt, reduce: Expr
			reduce(50), // gt, reduce: Expr
			reduce(50), // neq, reduce: Expr
			reduce(50), // and, reduce: Expr
			reduce(50), // or, reduce: Expr
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(50), // rp, reduce: Expr
			nil,        // else
			nil,        // exit
			reduce(50), // plus, reduce: Expr
			reduce(50), // minus, reduce: Expr
			reduce(50), // modulo, reduce: Expr
			shift(135), // mul
			shift(136), // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(56), // eq, reduce: Factor
			reduce(56), // lt, reduce: Factor
			reduce(56), // gt, reduce: Factor
			reduce(56), // neq, reduce: Factor
			reduce(56), // and, reduce: Factor
			reduce(56), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(56), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(56), // plus, reduce: Factor
			reduce(56), // minus, reduce: Factor
			reduce(56), // modulo, reduce: Factor
			reduce(56), // mul, reduce: Factor
			reduce(56), // div, reduce: Factor
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(53), // eq, reduce: Term
			reduce(53), // lt, reduce: Term
			reduce(53), // gt, reduce: Term
			reduce(53), // neq, reduce: Term
			reduce(53), // and, reduce: Term
			reduce(53), // or, reduce: Term
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(53), // rp, reduce: Term
			nil,        // else
			nil,        // exit
			reduce(53), // plus, reduce: Term
			reduce(53), // minus, reduce: Term
			reduce(53), // modulo, reduce: Term
			reduce(53), // mul, reduce: Term
			reduce(53), // div, reduce: Term
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(54), // eq, reduce: Term
			reduce(54), // lt, reduce: Term
			reduce(54), // gt, reduce: Term
			reduce(54), // neq, reduce: Term
			reduce(54), // and, reduce: Term
			reduce(54), // or, reduce: Term
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(54), // rp, reduce: Term
			nil,        // else
			nil,        // exit
			reduce(54), // plus, reduce: Term
			reduce(54), // minus, reduce: Term
			reduce(54), // modulo, reduce: Term
			reduce(54), // mul, reduce: Term
			reduce(54), // div, reduce: Term
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S174
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(184), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S175
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(185), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S176
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			shift(113), // eq
			shift(114), // lt
			shift(115), // gt
			shift(116), // neq
			shift(117), // and
			shift(118), // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			shift(186), // rp
			nil,        // else
			nil,        // exit
			shift(131), // plus
			shift(132), // minus
			shift(133), // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(58), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(58), // eq, reduce: Factor
			reduce(58), // lt, reduce: Factor
			reduce(58), // gt, reduce: Factor
			reduce(58), // neq, reduce: Factor
			reduce(58), // and, reduce: Factor
			reduce(58), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(58), // plus, reduce: Factor
			reduce(58), // minus, reduce: Factor
			reduce(58), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S178
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(187), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S179
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			shift(188), // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S180
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			shift(113), // eq
			shift(114), // lt
			shift(115), // gt
			shift(116), // neq
			shift(117), // and
			shift(118), // or
			nil,        // assign
			nil,        // if
			nil,        // lp
			shift(189), // rp
			nil,        // else
			nil,        // exit
			shift(131), // plus
			shift(132), // minus
			shift(133), // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S181
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(58), // eq, reduce: Factor
			reduce(58), // lt, reduce: Factor
			reduce(58), // gt, reduce: Factor
			reduce(58), // neq, reduce: Factor
			reduce(58), // and, reduce: Factor
			reduce(58), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(58), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(58), // plus, reduce: Factor
			reduce(58), // minus, reduce: Factor
			reduce(58), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			shift(190), // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(56),  // out
			shift(57),  // varId
			shift(58),  // in
			nil,        // empty
			shift(40),  // int
			shift(41),  // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			shift(66),  // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			shift(68),  // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S183
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			shift(191), // lcurly
			reduce(47), // rcurly, reduce: Block
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(47), // out, reduce: Block
			reduce(47), // varId, reduce: Block
			reduce(47), // in, reduce: Block
			nil,        // empty
			reduce(47), // int, reduce: Block
			reduce(47), // bool, reduce: Block
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(47), // if, reduce: Block
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(47), // exit, reduce: Block
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(15), // stmtEnd, reduce: NodeVar
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(15), // eq, reduce: NodeVar
			reduce(15), // lt, reduce: NodeVar
			reduce(15), // gt, reduce: NodeVar
			reduce(15), // neq, reduce: NodeVar
			reduce(15), // and, reduce: NodeVar
			reduce(15), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(15), // plus, reduce: NodeVar
			reduce(15), // minus, reduce: NodeVar
			reduce(15), // modulo, reduce: NodeVar
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S185
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(14), // stmtEnd, reduce: NodeVar
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(14), // eq, reduce: NodeVar
			reduce(14), // lt, reduce: NodeVar
			reduce(14), // gt, reduce: NodeVar
			reduce(14), // neq, reduce: NodeVar
			reduce(14), // and, reduce: NodeVar
			reduce(14), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(14), // plus, reduce: NodeVar
			reduce(14), // minus, reduce: NodeVar
			reduce(14), // modulo, reduce: NodeVar
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S186
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			reduce(56), // stmtEnd, reduce: Factor
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(56), // eq, reduce: Factor
			reduce(56), // lt, reduce: Factor
			reduce(56), // gt, reduce: Factor
			reduce(56), // neq, reduce: Factor
			reduce(56), // and, reduce: Factor
			reduce(56), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			nil,        // exit
			reduce(56), // plus, reduce: Factor
			reduce(56), // minus, reduce: Factor
			reduce(56), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S187
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(15), // eq, reduce: NodeVar
			reduce(15), // lt, reduce: NodeVar
			reduce(15), // gt, reduce: NodeVar
			reduce(15), // neq, reduce: NodeVar
			reduce(15), // and, reduce: NodeVar
			reduce(15), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(15), // rp, reduce: NodeVar
			nil,        // else
			nil,        // exit
			reduce(15), // plus, reduce: NodeVar
			reduce(15), // minus, reduce: NodeVar
			reduce(15), // modulo, reduce: NodeVar
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S188
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(14), // eq, reduce: NodeVar
			reduce(14), // lt, reduce: NodeVar
			reduce(14), // gt, reduce: NodeVar
			reduce(14), // neq, reduce: NodeVar
			reduce(14), // and, reduce: NodeVar
			reduce(14), // or, reduce: NodeVar
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(14), // rp, reduce: NodeVar
			nil,        // else
			nil,        // exit
			reduce(14), // plus, reduce: NodeVar
			reduce(14), // minus, reduce: NodeVar
			reduce(14), // modulo, reduce: NodeVar
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S189
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			nil,        // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			nil,        // out
			nil,        // varId
			nil,        // in
			nil,        // empty
			nil,        // int
			nil,        // bool
			nil,        // process
			reduce(56), // eq, reduce: Factor
			reduce(56), // lt, reduce: Factor
			reduce(56), // gt, reduce: Factor
			reduce(56), // neq, reduce: Factor
			reduce(56), // and, reduce: Factor
			reduce(56), // or, reduce: Factor
			nil,        // assign
			nil,        // if
			nil,        // lp
			reduce(56), // rp, reduce: Factor
			nil,        // else
			nil,        // exit
			reduce(56), // plus, reduce: Factor
			reduce(56), // minus, reduce: Factor
			reduce(56), // modulo, reduce: Factor
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S190
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(46), // rcurly, reduce: Block
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(46), // out, reduce: Block
			reduce(46), // varId, reduce: Block
			reduce(46), // in, reduce: Block
			nil,        // empty
			reduce(46), // int, reduce: Block
			reduce(46), // bool, reduce: Block
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(46), // if, reduce: Block
			nil,        // lp
			nil,        // rp
			reduce(46), // else, reduce: Block
			reduce(46), // exit, reduce: Block
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S191
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // node
			nil,       // nodeId
			nil,       // lcurly
			nil,       // rcurly
			nil,       // template
			nil,       // colon
			nil,       // stmtEnd
			nil,       // ->
			nil,       // period
			shift(56), // out
			shift(57), // varId
			shift(58), // in
			nil,       // empty
			shift(40), // int
			shift(41), // bool
			nil,       // process
			nil,       // eq
			nil,       // lt
			nil,       // gt
			nil,       // neq
			nil,       // and
			nil,       // or
			nil,       // assign
			shift(66), // if
			nil,       // lp
			nil,       // rp
			nil,       // else
			shift(68), // exit
			nil,       // plus
			nil,       // minus
			nil,       // modulo
			nil,       // mul
			nil,       // div
			nil,       // not
			nil,       // int64
		},
	},
	actionRow{ // S192
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(38), // rcurly, reduce: IfStmt
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(38), // out, reduce: IfStmt
			reduce(38), // varId, reduce: IfStmt
			reduce(38), // in, reduce: IfStmt
			nil,        // empty
			reduce(38), // int, reduce: IfStmt
			reduce(38), // bool, reduce: IfStmt
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(38), // if, reduce: IfStmt
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(38), // exit, reduce: IfStmt
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S193
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			shift(194), // rcurly
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			shift(56),  // out
			shift(57),  // varId
			shift(58),  // in
			nil,        // empty
			shift(40),  // int
			shift(41),  // bool
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			shift(66),  // if
			nil,        // lp
			nil,        // rp
			nil,        // else
			shift(68),  // exit
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
	actionRow{ // S194
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // node
			nil,        // nodeId
			nil,        // lcurly
			reduce(46), // rcurly, reduce: Block
			nil,        // template
			nil,        // colon
			nil,        // stmtEnd
			nil,        // ->
			nil,        // period
			reduce(46), // out, reduce: Block
			reduce(46), // varId, reduce: Block
			reduce(46), // in, reduce: Block
			nil,        // empty
			reduce(46), // int, reduce: Block
			reduce(46), // bool, reduce: Block
			nil,        // process
			nil,        // eq
			nil,        // lt
			nil,        // gt
			nil,        // neq
			nil,        // and
			nil,        // or
			nil,        // assign
			reduce(46), // if, reduce: Block
			nil,        // lp
			nil,        // rp
			nil,        // else
			reduce(46), // exit, reduce: Block
			nil,        // plus
			nil,        // minus
			nil,        // modulo
			nil,        // mul
			nil,        // div
			nil,        // not
			nil,        // int64
		},
	},
}
