// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "github.com/Ygg-Drasill/Sleipnir/pkg/gocc/util"
    "github.com/Ygg-Drasill/Sleipnir/pkg/gocc/token"
    "github.com/Ygg-Drasill/Sleipnir/pkg/ast"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : ProgramDeclarationList	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ProgramDeclarationList : NodeLst ConnLst	<< ast.NewProgram(X[0], X[1]) >>`,
		Id:         "ProgramDeclarationList",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProgram(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Node : node nodeId lcurly NodeIn NodeOut NodeProc rcurly	<< ast.NewNode(C, X[1], X[3], X[4], X[5], false) >>`,
		Id:         "Node",
		NTType:     2,
		Index:      2,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(C, X[1], X[3], X[4], X[5], false)
		},
	},
	ProdTabEntry{
		String: `Node : template nodeId lcurly NodeIn NodeOut NodeProc rcurly	<< ast.NewNode(C, X[1], X[3], X[4], X[5], true) >>`,
		Id:         "Node",
		NTType:     2,
		Index:      3,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNode(C, X[1], X[3], X[4], X[5], true)
		},
	},
	ProdTabEntry{
		String: `Node : node nodeId colon nodeId stmtEnd	<< ast.UseTemplate(X[1], X[3]) >>`,
		Id:         "Node",
		NTType:     2,
		Index:      4,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.UseTemplate(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Conn : ConnOut "->" ConnIn stmtEnd	<< ast.NewConnection(X[0], X[2]) >>`,
		Id:         "Conn",
		NTType:     3,
		Index:      5,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConnection(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ConnOut : nodeId period out period varId	<< ast.NewJunction(X[0], X[4]) >>`,
		Id:         "ConnOut",
		NTType:     4,
		Index:      6,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewJunction(X[0], X[4])
		},
	},
	ProdTabEntry{
		String: `ConnIn : nodeId period in period varId	<< ast.NewJunction(X[0], X[4]) >>`,
		Id:         "ConnIn",
		NTType:     5,
		Index:      7,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewJunction(X[0], X[4])
		},
	},
	ProdTabEntry{
		String: `NodeLst : Node	<< ast.NewNodeList(X[0]) >>`,
		Id:         "NodeLst",
		NTType:     6,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0])
		},
	},
	ProdTabEntry{
		String: `NodeLst : NodeLst Node	<< ast.AppendNode(X[0], X[1]) >>`,
		Id:         "NodeLst",
		NTType:     6,
		Index:      9,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendNode(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ConnLst : Conn ConnLst	<< ast.AppendConnection(X[1], X[0]) >>`,
		Id:         "ConnLst",
		NTType:     7,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendConnection(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `ConnLst : empty	<< ast.NewConnectionList() >>`,
		Id:         "ConnLst",
		NTType:     7,
		Index:      11,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConnectionList()
		},
	},
	ProdTabEntry{
		String: `Type : int	<<  >>`,
		Id:         "Type",
		NTType:     8,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : bool	<<  >>`,
		Id:         "Type",
		NTType:     8,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NodeVar : in period varId	<< ast.NewNodeVar(X[0], X[2]) >>`,
		Id:         "NodeVar",
		NTType:     9,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeVar(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `NodeVar : out period varId	<< ast.NewNodeVar(X[0], X[2]) >>`,
		Id:         "NodeVar",
		NTType:     9,
		Index:      15,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeVar(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `NodeIn : in lcurly DeclarationList rcurly	<< ast.NewScopeIn(C, X[2]) >>`,
		Id:         "NodeIn",
		NTType:     10,
		Index:      16,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewScopeIn(C, X[2])
		},
	},
	ProdTabEntry{
		String: `NodeIn : empty	<<  >>`,
		Id:         "NodeIn",
		NTType:     10,
		Index:      17,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `NodeOut : out lcurly DeclarationList rcurly	<< ast.NewScopeOut(C, X[2]) >>`,
		Id:         "NodeOut",
		NTType:     11,
		Index:      18,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewScopeOut(C, X[2])
		},
	},
	ProdTabEntry{
		String: `NodeOut : empty	<<  >>`,
		Id:         "NodeOut",
		NTType:     11,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `NodeProc : process Block	<< ast.NewScopeProc(C, X[1]) >>`,
		Id:         "NodeProc",
		NTType:     12,
		Index:      20,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewScopeProc(C, X[1])
		},
	},
	ProdTabEntry{
		String: `NodeProc : process lcurly rcurly	<< ast.NewScopeProc(C, nil) >>`,
		Id:         "NodeProc",
		NTType:     12,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewScopeProc(C, nil)
		},
	},
	ProdTabEntry{
		String: `NodeProc : empty	<<  >>`,
		Id:         "NodeProc",
		NTType:     12,
		Index:      22,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Identifier : NodeVar	<< X[0], nil >>`,
		Id:         "Identifier",
		NTType:     13,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Identifier : varId	<< ast.NewLocalVar(X[0]) >>`,
		Id:         "Identifier",
		NTType:     13,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewLocalVar(X[0])
		},
	},
	ProdTabEntry{
		String: `CompareOperator : eq	<<  >>`,
		Id:         "CompareOperator",
		NTType:     14,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CompareOperator : lt	<<  >>`,
		Id:         "CompareOperator",
		NTType:     14,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CompareOperator : gt	<<  >>`,
		Id:         "CompareOperator",
		NTType:     14,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CompareOperator : neq	<<  >>`,
		Id:         "CompareOperator",
		NTType:     14,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CompareOperator : and	<<  >>`,
		Id:         "CompareOperator",
		NTType:     14,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CompareOperator : or	<<  >>`,
		Id:         "CompareOperator",
		NTType:     14,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DeclarationStmt : Type varId stmtEnd	<< ast.NewDeclaration(C, X[0], X[1], nil) >>`,
		Id:         "DeclarationStmt",
		NTType:     15,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclaration(C, X[0], X[1], nil)
		},
	},
	ProdTabEntry{
		String: `DeclarationStmt : Type varId Assignment stmtEnd	<< ast.NewDeclaration(C, X[0], X[1], X[2]) >>`,
		Id:         "DeclarationStmt",
		NTType:     15,
		Index:      32,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclaration(C, X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `DeclarationList : DeclarationStmt DeclarationList	<< ast.AppendDeclaration(X[1], X[0]) >>`,
		Id:         "DeclarationList",
		NTType:     16,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendDeclaration(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `DeclarationList : empty	<< ast.NewDeclarationList() >>`,
		Id:         "DeclarationList",
		NTType:     16,
		Index:      34,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclarationList()
		},
	},
	ProdTabEntry{
		String: `Assignment : assign Expr	<< X[1], nil >>`,
		Id:         "Assignment",
		NTType:     17,
		Index:      35,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `AssignStmt : Identifier Assignment stmtEnd	<< ast.NewAssignmentStatement(X[0], X[1]) >>`,
		Id:         "AssignStmt",
		NTType:     18,
		Index:      36,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignmentStatement(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ControlStmt : IfStmt	<< X[0], nil >>`,
		Id:         "ControlStmt",
		NTType:     19,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IfStmt : if lp Expr rp Block else Block	<< ast.NewIfStatement(X[2], X[4], X[6]) >>`,
		Id:         "IfStmt",
		NTType:     20,
		Index:      38,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfStatement(X[2], X[4], X[6])
		},
	},
	ProdTabEntry{
		String: `IfStmt : if lp Expr rp Block	<< ast.NewIfStatement(X[2], X[4], nil) >>`,
		Id:         "IfStmt",
		NTType:     20,
		Index:      39,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfStatement(X[2], X[4], nil)
		},
	},
	ProdTabEntry{
		String: `Stmt : DeclarationStmt	<< X[0], nil >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Stmt : AssignStmt	<< X[0], nil >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Stmt : ControlStmt	<< X[0], nil >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Stmt : exit stmtEnd	<< X[0], nil >>`,
		Id:         "Stmt",
		NTType:     21,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StmtLst : StmtLst Stmt	<< ast.AppendStatement(X[0], X[1]) >>`,
		Id:         "StmtLst",
		NTType:     22,
		Index:      44,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendStatement(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `StmtLst : Stmt	<< ast.NewStatementList(X[0]) >>`,
		Id:         "StmtLst",
		NTType:     22,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewStatementList(X[0])
		},
	},
	ProdTabEntry{
		String: `Block : lcurly StmtLst rcurly	<< X[1], nil >>`,
		Id:         "Block",
		NTType:     23,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Block : empty	<<  >>`,
		Id:         "Block",
		NTType:     23,
		Index:      47,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Expr : Expr plus Term	<< ast.NewExpression(X[0], X[1], X[2]) >>`,
		Id:         "Expr",
		NTType:     24,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Expr : Expr minus Term	<< ast.NewExpression(X[0], X[1], X[2]) >>`,
		Id:         "Expr",
		NTType:     24,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Expr : Expr modulo Term	<< ast.NewExpression(X[0], X[1], X[2]) >>`,
		Id:         "Expr",
		NTType:     24,
		Index:      50,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Expr : Term	<< X[0], nil >>`,
		Id:         "Expr",
		NTType:     24,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expr : Expr CompareOperator Factor	<< ast.NewExpression(X[0], X[1], X[2]) >>`,
		Id:         "Expr",
		NTType:     24,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Term mul Factor	<< ast.NewExpression(X[0], X[1], X[2]) >>`,
		Id:         "Term",
		NTType:     25,
		Index:      53,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Term div Factor	<< ast.NewExpression(X[0], X[1], X[2]) >>`,
		Id:         "Term",
		NTType:     25,
		Index:      54,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Factor	<< X[0], nil >>`,
		Id:         "Term",
		NTType:     25,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : lp Expr rp	<< X[1], nil >>`,
		Id:         "Factor",
		NTType:     26,
		Index:      56,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Identifier	<< X[0], nil >>`,
		Id:         "Factor",
		NTType:     26,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : not Factor	<< X[1], nil >>`,
		Id:         "Factor",
		NTType:     26,
		Index:      58,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Factor : int64	<< util.IntValue(X[0].(*token.Token).Lit) >>`,
		Id:         "Factor",
		NTType:     26,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return util.IntValue(X[0].(*token.Token).Lit)
		},
	},
}
